/****************************************************************************
** Meta object code from reading C++ file 'qhttpheaders.h'
**
** Created by: The Qt Meta Object Compiler version 69 (Qt 6.9.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../../../../src/network/access/qhttpheaders.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'qhttpheaders.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 69
#error "This file was generated using the moc from 6.9.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {
struct qt_meta_tag_ZN12QHttpHeadersE_t {};
} // unnamed namespace

template <> constexpr inline auto QHttpHeaders::qt_create_metaobjectdata<qt_meta_tag_ZN12QHttpHeadersE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "QHttpHeaders",
        "WellKnownHeader",
        "AIM",
        "Accept",
        "AcceptAdditions",
        "AcceptCH",
        "AcceptDatetime",
        "AcceptEncoding",
        "AcceptFeatures",
        "AcceptLanguage",
        "AcceptPatch",
        "AcceptPost",
        "AcceptRanges",
        "AcceptSignature",
        "AccessControlAllowCredentials",
        "AccessControlAllowHeaders",
        "AccessControlAllowMethods",
        "AccessControlAllowOrigin",
        "AccessControlExposeHeaders",
        "AccessControlMaxAge",
        "AccessControlRequestHeaders",
        "AccessControlRequestMethod",
        "Age",
        "Allow",
        "ALPN",
        "AltSvc",
        "AltUsed",
        "Alternates",
        "ApplyToRedirectRef",
        "AuthenticationControl",
        "AuthenticationInfo",
        "Authorization",
        "CacheControl",
        "CacheStatus",
        "CalManagedID",
        "CalDAVTimezones",
        "CapsuleProtocol",
        "CDNCacheControl",
        "CDNLoop",
        "CertNotAfter",
        "CertNotBefore",
        "ClearSiteData",
        "ClientCert",
        "ClientCertChain",
        "Close",
        "Connection",
        "ContentDigest",
        "ContentDisposition",
        "ContentEncoding",
        "ContentID",
        "ContentLanguage",
        "ContentLength",
        "ContentLocation",
        "ContentRange",
        "ContentSecurityPolicy",
        "ContentSecurityPolicyReportOnly",
        "ContentType",
        "Cookie",
        "CrossOriginEmbedderPolicy",
        "CrossOriginEmbedderPolicyReportOnly",
        "CrossOriginOpenerPolicy",
        "CrossOriginOpenerPolicyReportOnly",
        "CrossOriginResourcePolicy",
        "DASL",
        "Date",
        "DAV",
        "DeltaBase",
        "Depth",
        "Destination",
        "DifferentialID",
        "DPoP",
        "DPoPNonce",
        "EarlyData",
        "ETag",
        "Expect",
        "ExpectCT",
        "Expires",
        "Forwarded",
        "From",
        "Hobareg",
        "Host",
        "If",
        "IfMatch",
        "IfModifiedSince",
        "IfNoneMatch",
        "IfRange",
        "IfScheduleTagMatch",
        "IfUnmodifiedSince",
        "IM",
        "IncludeReferredTokenBindingID",
        "KeepAlive",
        "Label",
        "LastEventID",
        "LastModified",
        "Link",
        "Location",
        "LockToken",
        "MaxForwards",
        "MementoDatetime",
        "Meter",
        "MIMEVersion",
        "Negotiate",
        "NEL",
        "ODataEntityId",
        "ODataIsolation",
        "ODataMaxVersion",
        "ODataVersion",
        "OptionalWWWAuthenticate",
        "OrderingType",
        "Origin",
        "OriginAgentCluster",
        "OSCORE",
        "OSLCCoreVersion",
        "Overwrite",
        "PingFrom",
        "PingTo",
        "Position",
        "Prefer",
        "PreferenceApplied",
        "Priority",
        "ProxyAuthenticate",
        "ProxyAuthenticationInfo",
        "ProxyAuthorization",
        "ProxyStatus",
        "PublicKeyPins",
        "PublicKeyPinsReportOnly",
        "Range",
        "RedirectRef",
        "Referer",
        "Refresh",
        "ReplayNonce",
        "ReprDigest",
        "RetryAfter",
        "ScheduleReply",
        "ScheduleTag",
        "SecPurpose",
        "SecTokenBinding",
        "SecWebSocketAccept",
        "SecWebSocketExtensions",
        "SecWebSocketKey",
        "SecWebSocketProtocol",
        "SecWebSocketVersion",
        "Server",
        "ServerTiming",
        "SetCookie",
        "Signature",
        "SignatureInput",
        "SLUG",
        "SoapAction",
        "StatusURI",
        "StrictTransportSecurity",
        "Sunset",
        "SurrogateCapability",
        "SurrogateControl",
        "TCN",
        "TE",
        "Timeout",
        "Topic",
        "Traceparent",
        "Tracestate",
        "Trailer",
        "TransferEncoding",
        "TTL",
        "Upgrade",
        "Urgency",
        "UserAgent",
        "VariantVary",
        "Vary",
        "Via",
        "WantContentDigest",
        "WantReprDigest",
        "WWWAuthenticate",
        "XContentTypeOptions",
        "XFrameOptions",
        "AcceptCharset",
        "CPEPInfo",
        "Pragma",
        "ProtocolInfo",
        "ProtocolQuery"
    };

    QtMocHelpers::UintData qt_methods {
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
        // enum 'WellKnownHeader'
        QtMocHelpers::EnumData<WellKnownHeader>(1, 1, QMC::EnumIsScoped).add({
            {    2, WellKnownHeader::AIM },
            {    3, WellKnownHeader::Accept },
            {    4, WellKnownHeader::AcceptAdditions },
            {    5, WellKnownHeader::AcceptCH },
            {    6, WellKnownHeader::AcceptDatetime },
            {    7, WellKnownHeader::AcceptEncoding },
            {    8, WellKnownHeader::AcceptFeatures },
            {    9, WellKnownHeader::AcceptLanguage },
            {   10, WellKnownHeader::AcceptPatch },
            {   11, WellKnownHeader::AcceptPost },
            {   12, WellKnownHeader::AcceptRanges },
            {   13, WellKnownHeader::AcceptSignature },
            {   14, WellKnownHeader::AccessControlAllowCredentials },
            {   15, WellKnownHeader::AccessControlAllowHeaders },
            {   16, WellKnownHeader::AccessControlAllowMethods },
            {   17, WellKnownHeader::AccessControlAllowOrigin },
            {   18, WellKnownHeader::AccessControlExposeHeaders },
            {   19, WellKnownHeader::AccessControlMaxAge },
            {   20, WellKnownHeader::AccessControlRequestHeaders },
            {   21, WellKnownHeader::AccessControlRequestMethod },
            {   22, WellKnownHeader::Age },
            {   23, WellKnownHeader::Allow },
            {   24, WellKnownHeader::ALPN },
            {   25, WellKnownHeader::AltSvc },
            {   26, WellKnownHeader::AltUsed },
            {   27, WellKnownHeader::Alternates },
            {   28, WellKnownHeader::ApplyToRedirectRef },
            {   29, WellKnownHeader::AuthenticationControl },
            {   30, WellKnownHeader::AuthenticationInfo },
            {   31, WellKnownHeader::Authorization },
            {   32, WellKnownHeader::CacheControl },
            {   33, WellKnownHeader::CacheStatus },
            {   34, WellKnownHeader::CalManagedID },
            {   35, WellKnownHeader::CalDAVTimezones },
            {   36, WellKnownHeader::CapsuleProtocol },
            {   37, WellKnownHeader::CDNCacheControl },
            {   38, WellKnownHeader::CDNLoop },
            {   39, WellKnownHeader::CertNotAfter },
            {   40, WellKnownHeader::CertNotBefore },
            {   41, WellKnownHeader::ClearSiteData },
            {   42, WellKnownHeader::ClientCert },
            {   43, WellKnownHeader::ClientCertChain },
            {   44, WellKnownHeader::Close },
            {   45, WellKnownHeader::Connection },
            {   46, WellKnownHeader::ContentDigest },
            {   47, WellKnownHeader::ContentDisposition },
            {   48, WellKnownHeader::ContentEncoding },
            {   49, WellKnownHeader::ContentID },
            {   50, WellKnownHeader::ContentLanguage },
            {   51, WellKnownHeader::ContentLength },
            {   52, WellKnownHeader::ContentLocation },
            {   53, WellKnownHeader::ContentRange },
            {   54, WellKnownHeader::ContentSecurityPolicy },
            {   55, WellKnownHeader::ContentSecurityPolicyReportOnly },
            {   56, WellKnownHeader::ContentType },
            {   57, WellKnownHeader::Cookie },
            {   58, WellKnownHeader::CrossOriginEmbedderPolicy },
            {   59, WellKnownHeader::CrossOriginEmbedderPolicyReportOnly },
            {   60, WellKnownHeader::CrossOriginOpenerPolicy },
            {   61, WellKnownHeader::CrossOriginOpenerPolicyReportOnly },
            {   62, WellKnownHeader::CrossOriginResourcePolicy },
            {   63, WellKnownHeader::DASL },
            {   64, WellKnownHeader::Date },
            {   65, WellKnownHeader::DAV },
            {   66, WellKnownHeader::DeltaBase },
            {   67, WellKnownHeader::Depth },
            {   68, WellKnownHeader::Destination },
            {   69, WellKnownHeader::DifferentialID },
            {   70, WellKnownHeader::DPoP },
            {   71, WellKnownHeader::DPoPNonce },
            {   72, WellKnownHeader::EarlyData },
            {   73, WellKnownHeader::ETag },
            {   74, WellKnownHeader::Expect },
            {   75, WellKnownHeader::ExpectCT },
            {   76, WellKnownHeader::Expires },
            {   77, WellKnownHeader::Forwarded },
            {   78, WellKnownHeader::From },
            {   79, WellKnownHeader::Hobareg },
            {   80, WellKnownHeader::Host },
            {   81, WellKnownHeader::If },
            {   82, WellKnownHeader::IfMatch },
            {   83, WellKnownHeader::IfModifiedSince },
            {   84, WellKnownHeader::IfNoneMatch },
            {   85, WellKnownHeader::IfRange },
            {   86, WellKnownHeader::IfScheduleTagMatch },
            {   87, WellKnownHeader::IfUnmodifiedSince },
            {   88, WellKnownHeader::IM },
            {   89, WellKnownHeader::IncludeReferredTokenBindingID },
            {   90, WellKnownHeader::KeepAlive },
            {   91, WellKnownHeader::Label },
            {   92, WellKnownHeader::LastEventID },
            {   93, WellKnownHeader::LastModified },
            {   94, WellKnownHeader::Link },
            {   95, WellKnownHeader::Location },
            {   96, WellKnownHeader::LockToken },
            {   97, WellKnownHeader::MaxForwards },
            {   98, WellKnownHeader::MementoDatetime },
            {   99, WellKnownHeader::Meter },
            {  100, WellKnownHeader::MIMEVersion },
            {  101, WellKnownHeader::Negotiate },
            {  102, WellKnownHeader::NEL },
            {  103, WellKnownHeader::ODataEntityId },
            {  104, WellKnownHeader::ODataIsolation },
            {  105, WellKnownHeader::ODataMaxVersion },
            {  106, WellKnownHeader::ODataVersion },
            {  107, WellKnownHeader::OptionalWWWAuthenticate },
            {  108, WellKnownHeader::OrderingType },
            {  109, WellKnownHeader::Origin },
            {  110, WellKnownHeader::OriginAgentCluster },
            {  111, WellKnownHeader::OSCORE },
            {  112, WellKnownHeader::OSLCCoreVersion },
            {  113, WellKnownHeader::Overwrite },
            {  114, WellKnownHeader::PingFrom },
            {  115, WellKnownHeader::PingTo },
            {  116, WellKnownHeader::Position },
            {  117, WellKnownHeader::Prefer },
            {  118, WellKnownHeader::PreferenceApplied },
            {  119, WellKnownHeader::Priority },
            {  120, WellKnownHeader::ProxyAuthenticate },
            {  121, WellKnownHeader::ProxyAuthenticationInfo },
            {  122, WellKnownHeader::ProxyAuthorization },
            {  123, WellKnownHeader::ProxyStatus },
            {  124, WellKnownHeader::PublicKeyPins },
            {  125, WellKnownHeader::PublicKeyPinsReportOnly },
            {  126, WellKnownHeader::Range },
            {  127, WellKnownHeader::RedirectRef },
            {  128, WellKnownHeader::Referer },
            {  129, WellKnownHeader::Refresh },
            {  130, WellKnownHeader::ReplayNonce },
            {  131, WellKnownHeader::ReprDigest },
            {  132, WellKnownHeader::RetryAfter },
            {  133, WellKnownHeader::ScheduleReply },
            {  134, WellKnownHeader::ScheduleTag },
            {  135, WellKnownHeader::SecPurpose },
            {  136, WellKnownHeader::SecTokenBinding },
            {  137, WellKnownHeader::SecWebSocketAccept },
            {  138, WellKnownHeader::SecWebSocketExtensions },
            {  139, WellKnownHeader::SecWebSocketKey },
            {  140, WellKnownHeader::SecWebSocketProtocol },
            {  141, WellKnownHeader::SecWebSocketVersion },
            {  142, WellKnownHeader::Server },
            {  143, WellKnownHeader::ServerTiming },
            {  144, WellKnownHeader::SetCookie },
            {  145, WellKnownHeader::Signature },
            {  146, WellKnownHeader::SignatureInput },
            {  147, WellKnownHeader::SLUG },
            {  148, WellKnownHeader::SoapAction },
            {  149, WellKnownHeader::StatusURI },
            {  150, WellKnownHeader::StrictTransportSecurity },
            {  151, WellKnownHeader::Sunset },
            {  152, WellKnownHeader::SurrogateCapability },
            {  153, WellKnownHeader::SurrogateControl },
            {  154, WellKnownHeader::TCN },
            {  155, WellKnownHeader::TE },
            {  156, WellKnownHeader::Timeout },
            {  157, WellKnownHeader::Topic },
            {  158, WellKnownHeader::Traceparent },
            {  159, WellKnownHeader::Tracestate },
            {  160, WellKnownHeader::Trailer },
            {  161, WellKnownHeader::TransferEncoding },
            {  162, WellKnownHeader::TTL },
            {  163, WellKnownHeader::Upgrade },
            {  164, WellKnownHeader::Urgency },
            {  165, WellKnownHeader::UserAgent },
            {  166, WellKnownHeader::VariantVary },
            {  167, WellKnownHeader::Vary },
            {  168, WellKnownHeader::Via },
            {  169, WellKnownHeader::WantContentDigest },
            {  170, WellKnownHeader::WantReprDigest },
            {  171, WellKnownHeader::WWWAuthenticate },
            {  172, WellKnownHeader::XContentTypeOptions },
            {  173, WellKnownHeader::XFrameOptions },
            {  174, WellKnownHeader::AcceptCharset },
            {  175, WellKnownHeader::CPEPInfo },
            {  176, WellKnownHeader::Pragma },
            {  177, WellKnownHeader::ProtocolInfo },
            {  178, WellKnownHeader::ProtocolQuery },
        }),
    };
    return QtMocHelpers::metaObjectData<QHttpHeaders, qt_meta_tag_ZN12QHttpHeadersE_t>(QMC::PropertyAccessInStaticMetaCall, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject QHttpHeaders::staticMetaObject = { {
    nullptr,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN12QHttpHeadersE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN12QHttpHeadersE_t>.data,
    nullptr,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN12QHttpHeadersE_t>.metaTypes,
    nullptr
} };

QT_WARNING_POP
