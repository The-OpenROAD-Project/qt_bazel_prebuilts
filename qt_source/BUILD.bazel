load("//:qt_internal_library.bzl", "qt_cc_inc_library", "qt_internal_library", "qt_static_plugin")

QT_VERSION = "6.9.1"

QT_BASE = "qtbase-{}".format(QT_VERSION)

common_copts = [
    "-w",
    "-fPIC",
    "-DQT_NO_CAST_TO_ASCII",
    "-DQT_BUILDING_QT",
]

common_includes = []

common_defines = [
    # Enable the "next generation" version of Harfbuzz, which is what we have
    # in //third_party. See qt_harfbuzz_old for caveats.
    "ENABLE_HARFBUZZ_NG",
    "QT_ASCII_CAST_WARNINGS",
    "QT_DEPRECATED_WARNINGS",
    "QT_DISABLE_DEPRECATED_BEFORE=0x050000",
    "QT_MOC_COMPAT",
    "QT_NO_DEBUG",
    "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
    "QT_NO_USING_NAMESPACE",
    "QT_STATIC",
    "QT_STATICPLUGIN",
    "QT_USE_QSTRINGBUILDER",
    "QT_VERSION_MAJOR=" + QT_VERSION.split(".")[0],
    "QT_VERSION_MINOR=" + QT_VERSION.split(".")[1],
    "QT_VERSION_PATCH=" + QT_VERSION.split(".")[2],
    "QT_VERSION_STR=\\\"" + QT_VERSION + "\\\"",
    "_LARGEFILE64_SOURCE",
    "_LARGEFILE_SOURCE",
    "_REENTRANT",
]

cc_binary(
    name = "syncqt",
    srcs = [QT_BASE + "/src/tools/syncqt/main.cpp"],
    defines = common_defines,
)

cc_library(
    name = "common_headers",
    includes = [
        "./{}/src/tools/shared/".format(QT_BASE),
        "./{}/src/tools/uic/".format(QT_BASE),
        "./{}/src/tools/uic/shared".format(QT_BASE),
    ],
    tags = ["avoid_dep"],
    textual_hdrs = [
        QT_BASE + "/src/tools/moc/keywords.cpp",
        QT_BASE + "/src/tools/moc/ppkeywords.cpp",
        QT_BASE + "/src/tools/shared/depfile_shared.h",
    ] + glob([
        QT_BASE + "/src/tools/moc/*.h",
        QT_BASE + "/src/tools/uic/**/*.h",
    ]),
    visibility = ["//visibility:private"],
)

cc_library(
    name = "qconfig_bootstrap",
    hdrs = [
        QT_BASE + "/src/corelib/global/qconfig-bootstrapped.h",
    ],
    includes = [
        QT_BASE + "/src/corelib/global/",
    ],
)

cc_library(
    name = "sha1",
    textual_hdrs = [
        QT_BASE + "/src/3rdparty/sha1/sha1.cpp",
    ],
)

cc_library(
    name = "rfc6234",
    hdrs = [
        QT_BASE + "/src/3rdparty/rfc6234/sha.h",
    ],
    includes = [
        "./" + QT_BASE + "/src/3rdparty/rfc6234/",
    ],
    textual_hdrs = [
        QT_BASE + "/src/3rdparty/rfc6234/sha-private.h",
        QT_BASE + "/src/3rdparty/rfc6234/sha224-256.c",
        QT_BASE + "/src/3rdparty/rfc6234/sha384-512.c",
    ],
)

cc_library(
    name = "siphash",
    textual_hdrs = [
        QT_BASE + "/src/3rdparty/siphash/siphash.cpp",
    ],
)

cc_library(
    name = "emoji_presentation_scanner",
    textual_hdrs = [
        QT_BASE + "/src/3rdparty/emoji-segmenter/emoji_presentation_scanner.c",
    ],
)

cc_library(
    name = "cbor",
    srcs = glob(
        include = [
            QT_BASE + "/src/3rdparty/tinycbor/src/*.h",
            QT_BASE + "/src/3rdparty/tinycbor/src/*.c",
        ],
        exclude = [
            QT_BASE + "/src/3rdparty/tinycbor/src/cborerrorstrings.c",
            QT_BASE + "/src/3rdparty/tinycbor/src/cborencoder.c",
        ],
    ),
    hdrs = [
        QT_BASE + "/src/3rdparty/tinycbor/src/cbor.h",
    ],
    includes = [
        "./" + QT_BASE + "/src/3rdparty/tinycbor/src/",
    ],
    textual_hdrs = [
        QT_BASE + "/src/3rdparty/tinycbor/src/cborerrorstrings.c",
        QT_BASE + "/src/3rdparty/tinycbor/src/cborencoder.c",
    ],
)

cc_library(
    name = "qt_pcre2",
    srcs = [
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_auto_possess.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_chartables.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_chkdint.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_compile.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_compile_class.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_config.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_context.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_dfa_match.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_error.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_extuni.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_find_bracket.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_jit_compile.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_maketables.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_match.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_match_data.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_newline.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_ord2utf.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_pattern_info.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_script_run.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_serialize.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_string_utils.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_study.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_substitute.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_substring.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_tables.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_ucd.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_valid_utf.c",
        QT_BASE + "/src/3rdparty/pcre2/src/pcre2_xclass.c",
    ],
    hdrs = glob([
        QT_BASE + "/src/3rdparty/pcre2/**/*.*",
    ]),
    copts = common_copts + [
        "-DHAVE_CONFIG_H",
        "-DPCRE2_CODE_UNIT_WIDTH=16",
        "-DPCRE2_DISABLE_JIT",
    ],
    defines = common_defines,
)

# The bootstrap lib includes functionality that's needed by moc and freinds,
# and thus needs to be built without moc.
cc_library(
    name = "bootstrap",
    srcs = [
        QT_BASE + "/src/corelib/global/qassert.cpp",
        QT_BASE + "/src/corelib/global/qfloat16.cpp",
        QT_BASE + "/src/corelib/global/qlogging.cpp",
        QT_BASE + "/src/corelib/global/qmalloc.cpp",
        QT_BASE + "/src/corelib/global/qtenvironmentvariables.cpp",
        QT_BASE + "/src/corelib/io/qabstractfileengine.cpp",
        QT_BASE + "/src/corelib/io/qbuffer.cpp",
        QT_BASE + "/src/corelib/io/qdebug.cpp",
        QT_BASE + "/src/corelib/io/qdir.cpp",
        QT_BASE + "/src/corelib/io/qfile.cpp",
        QT_BASE + "/src/corelib/io/qfiledevice.cpp",
        QT_BASE + "/src/corelib/io/qfileinfo.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemengine.cpp",
        QT_BASE + "/src/corelib/io/qfilesystementry.cpp",
        QT_BASE + "/src/corelib/io/qfsfileengine.cpp",
        QT_BASE + "/src/corelib/io/qfsfileengine_iterator.cpp",
        QT_BASE + "/src/corelib/io/qiodevice.cpp",
        QT_BASE + "/src/corelib/io/qstandardpaths.cpp",
        QT_BASE + "/src/corelib/kernel/qcoreapplication.cpp",
        QT_BASE + "/src/corelib/kernel/qmetatype.cpp",
        QT_BASE + "/src/corelib/kernel/qsystemerror.cpp",
        QT_BASE + "/src/corelib/plugin/quuid.cpp",
        QT_BASE + "/src/corelib/serialization/qcborcommon.cpp",
        QT_BASE + "/src/corelib/serialization/qcborstreamwriter.cpp",
        QT_BASE + "/src/corelib/serialization/qcborvalue.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonarray.cpp",
        QT_BASE + "/src/corelib/serialization/qjsoncbor.cpp",
        QT_BASE + "/src/corelib/serialization/qjsondocument.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonobject.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonparser.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonvalue.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonwriter.cpp",
        QT_BASE + "/src/corelib/serialization/qtextstream.cpp",
        QT_BASE + "/src/corelib/text/qbytearray.cpp",
        QT_BASE + "/src/corelib/text/qbytearraylist.cpp",
        QT_BASE + "/src/corelib/text/qbytearraymatcher.cpp",
        QT_BASE + "/src/corelib/text/qlatin1stringmatcher.cpp",
        QT_BASE + "/src/corelib/text/qlocale.cpp",
        QT_BASE + "/src/corelib/text/qlocale_tools.cpp",
        QT_BASE + "/src/corelib/text/qregularexpression.cpp",
        QT_BASE + "/src/corelib/text/qstring.cpp",
        QT_BASE + "/src/corelib/text/qstringbuilder.cpp",
        QT_BASE + "/src/corelib/text/qstringconverter.cpp",
        QT_BASE + "/src/corelib/text/qstringlist.cpp",
        QT_BASE + "/src/corelib/time/qcalendar.cpp",
        QT_BASE + "/src/corelib/time/qdatetime.cpp",
        QT_BASE + "/src/corelib/time/qgregoriancalendar.cpp",
        QT_BASE + "/src/corelib/time/qlocaltime.cpp",
        QT_BASE + "/src/corelib/time/qromancalendar.cpp",
        QT_BASE + "/src/corelib/time/qtimezone.cpp",
        QT_BASE + "/src/corelib/tools/qarraydata.cpp",
        QT_BASE + "/src/corelib/tools/qcommandlineoption.cpp",
        QT_BASE + "/src/corelib/tools/qcommandlineparser.cpp",
        QT_BASE + "/src/corelib/tools/qcryptographichash.cpp",
        QT_BASE + "/src/corelib/tools/qhash.cpp",
        QT_BASE + "/src/corelib/tools/qringbuffer.cpp",
    ] + select({
        "@platforms//os:osx": [
            QT_BASE + "/src/corelib/io/qfilesystemengine_unix.cpp",
            QT_BASE + "/src/corelib/io/qfsfileengine_unix.cpp",
            QT_BASE + "/src/corelib/io/qstandardpaths_mac.mm",
            QT_BASE + "/src/corelib/io/qfilesystemiterator_unix.cpp",
            QT_BASE + "/src/corelib/kernel/qcore_unix.cpp",
        ],
        "@platforms//os:linux": [
            QT_BASE + "/src/corelib/io/qfilesystemengine_unix.cpp",
            QT_BASE + "/src/corelib/io/qfsfileengine_unix.cpp",
            QT_BASE + "/src/corelib/io/qstandardpaths_unix.cpp",
            QT_BASE + "/src/corelib/io/qfilesystemiterator_unix.cpp",
            QT_BASE + "/src/corelib/kernel/qcore_unix.cpp",
        ],
    }),
    hdrs = glob([
        QT_BASE + "/build/include/QtCore/**/Q*",
        QT_BASE + "/build/include/QtCore/**/*.h",
    ]) + select({
        "@platforms//os:osx": [],
        "@platforms//os:linux": [
            QT_BASE + "/mkspecs/linux-g++/qplatformdefs.h",
            QT_BASE + "/mkspecs/common/posix/qplatformdefs.h",
        ],
    }),
    copts = common_copts + [
        "-U_FORTIFY_SOURCE",
        "-Wall",
        "-Wextra",
        "-Wsuggest-override",
        "-fPIC",
        "-fvisibility-inlines-hidden",
        "-fvisibility=hidden",
        "-mshstk",
        "-std=gnu++20",
    ],
    defines = [
        "HAVE_CONFIG_H",
        "QT_BOOTSTRAPPED",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_NO_CAST_FROM_ASCII",
        "QT_NO_CAST_TO_ASCII",
        "QT_NO_DEBUG",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_USE_QSTRINGBUILDER",
        "QT_VERSION_MAJOR=6",
        "QT_VERSION_MINOR=8",
        "QT_VERSION_PATCH=0",
        "QT_VERSION_STR=\"" + QT_VERSION + "\"",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    includes = [
        "./{}/mkspecs/linux-g++".format(QT_BASE),
        "./{}/build/include".format(QT_BASE),
        "./{}/build/include/QtCore".format(QT_BASE),
        "./{}/build/include/QtCore/{}".format(QT_BASE, QT_VERSION),
        "./{}/build/include/QtCore/{}/QtCore/".format(QT_BASE, QT_VERSION),
        "./{}/build/include/QtCore/{}/QtCore/private".format(QT_BASE, QT_VERSION),
    ],
    linkstatic = True,
    textual_hdrs = [
        QT_BASE + "/src/corelib/global/qfloat16tables.cpp",
        QT_BASE + "/src/corelib/text/qchar.cpp",
        QT_BASE + "/src/corelib/text/qlocale_data_p.h",
        QT_BASE + "/src/corelib/text/qstringmatcher.cpp",
        QT_BASE + "/src/corelib/text/qunicodetables.cpp",
        QT_BASE + "/src/corelib/time/qromancalendar_data_p.h",
        QT_BASE + "/src/corelib/serialization/qcborarray.cpp",
        QT_BASE + "/src/corelib/serialization/qcbormap.cpp",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":cbor",
        ":qconfig_bootstrap",
        ":qt_pcre2",
        ":rfc6234",
        ":sha1",
        ":siphash",
    ],
)

cc_binary(
    name = "moc",
    srcs = [
        QT_BASE + "/src/tools/moc/collectjson.cpp",
        QT_BASE + "/src/tools/moc/generator.cpp",
        QT_BASE + "/src/tools/moc/main.cpp",
        QT_BASE + "/src/tools/moc/moc.cpp",
        QT_BASE + "/src/tools/moc/parser.cpp",
        QT_BASE + "/src/tools/moc/preprocessor.cpp",
        QT_BASE + "/src/tools/moc/token.cpp",
    ],
    copts = common_copts,
    includes = common_includes + [],
    linkstatic = True,
    deps = [
        ":bootstrap",
        ":common_headers",
    ],
)

# This target provides no GL rendering implementation and no QT platform implementations.
# It is useful for building libraries that could be used by some binaries in a headless
# context (e.g. tests) and others in a native graphics context (e.g. applications).
# It makes no sense for a QT binary to depend on this target. The binary should
# depend on either qt_native or qt_headless depending on which platforms will be available
# to it at runtime.
qt_cc_inc_library(
    name = "qt_nogl",
    qt_version = QT_VERSION,
    deps = [
        ":concurrent",
        ":core",
        #":gif_plugin",
        ":gui",
        #":ico_plugin",
        #":jpeg_plugin",
        #":multimedia",
        #":multimediawidgets",
        #":platformsupport",
        #":qsvg_plugin",
        #":svg",
        #":svgicon_plugin",
        #":testlib",
        ":widgets",
        #":xml",
    ],
)

qt_internal_library(
    name = "core",
    srcs = [
        QT_BASE + "/src/corelib/.moc/moc_qnamespace.cpp",
        QT_BASE + "/src/corelib/global/qsimd.cpp",
        QT_BASE + "/src/corelib/tools/qhash.cpp",
        QT_BASE + "/src/corelib/compat/removed_api.cpp",
        QT_BASE + "/src/corelib/global/archdetect.cpp",
        QT_BASE + "/src/corelib/global/qassert.cpp",
        QT_BASE + "/src/corelib/global/qcompare.cpp",
        QT_BASE + "/src/corelib/global/qendian.cpp",
        QT_BASE + "/src/corelib/global/qfloat16.cpp",
        QT_BASE + "/src/corelib/global/qglobal.cpp",
        QT_BASE + "/src/corelib/global/qhooks.cpp",
        QT_BASE + "/src/corelib/global/qlibraryinfo.cpp",
        QT_BASE + "/src/corelib/global/qlogging.cpp",
        QT_BASE + "/src/corelib/global/qmalloc.cpp",
        QT_BASE + "/src/corelib/global/qnumeric.cpp",
        QT_BASE + "/src/corelib/global/qoperatingsystemversion.cpp",
        QT_BASE + "/src/corelib/global/qrandom.cpp",
        QT_BASE + "/src/corelib/global/qsysinfo.cpp",
        QT_BASE + "/src/corelib/global/qtenvironmentvariables.cpp",
        QT_BASE + "/src/corelib/global/qtypes.cpp",
        QT_BASE + "/src/corelib/global/q23utility.cpp",
        QT_BASE + "/src/corelib/ipc/qsharedmemory.cpp",
        QT_BASE + "/src/corelib/ipc/qsystemsemaphore.cpp",
        QT_BASE + "/src/corelib/ipc/qtipccommon.cpp",
        QT_BASE + "/src/corelib/io/qabstractfileengine.cpp",
        QT_BASE + "/src/corelib/io/qbuffer.cpp",
        QT_BASE + "/src/corelib/io/qdataurl.cpp",
        QT_BASE + "/src/corelib/io/qdebug.cpp",
        QT_BASE + "/src/corelib/io/qdir.cpp",
        QT_BASE + "/src/corelib/io/qdirlisting.cpp",
        QT_BASE + "/src/corelib/io/qdiriterator.cpp",
        QT_BASE + "/src/corelib/io/qfile.cpp",
        QT_BASE + "/src/corelib/io/qfiledevice.cpp",
        QT_BASE + "/src/corelib/io/qfileinfo.cpp",
        QT_BASE + "/src/corelib/io/qfileselector.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemengine.cpp",
        QT_BASE + "/src/corelib/io/qfilesystementry.cpp",
        QT_BASE + "/src/corelib/io/qfsfileengine.cpp",
        QT_BASE + "/src/corelib/io/qfsfileengine_iterator.cpp",
        QT_BASE + "/src/corelib/io/qiodevice.cpp",
        QT_BASE + "/src/corelib/io/qipaddress.cpp",
        QT_BASE + "/src/corelib/io/qlockfile.cpp",
        QT_BASE + "/src/corelib/io/qloggingcategory.cpp",
        QT_BASE + "/src/corelib/io/qloggingregistry.cpp",
        QT_BASE + "/src/corelib/io/qnoncontiguousbytedevice.cpp",
        QT_BASE + "/src/corelib/io/qresource.cpp",
        QT_BASE + "/src/corelib/io/qresource_iterator.cpp",
        QT_BASE + "/src/corelib/io/qsavefile.cpp",
        QT_BASE + "/src/corelib/io/qstandardpaths.cpp",
        QT_BASE + "/src/corelib/io/qstorageinfo.cpp",
        QT_BASE + "/src/corelib/io/qtemporarydir.cpp",
        QT_BASE + "/src/corelib/io/qtemporaryfile.cpp",
        QT_BASE + "/src/corelib/io/qurl.cpp",
        QT_BASE + "/src/corelib/io/qurlidna.cpp",
        QT_BASE + "/src/corelib/io/qurlquery.cpp",
        QT_BASE + "/src/corelib/io/qurlrecode.cpp",
        QT_BASE + "/src/corelib/io/qzip.cpp",
        QT_BASE + "/src/corelib/kernel/qabstracteventdispatcher.cpp",
        QT_BASE + "/src/corelib/kernel/qabstractnativeeventfilter.cpp",
        QT_BASE + "/src/corelib/kernel/qassociativeiterable.cpp",
        QT_BASE + "/src/corelib/kernel/qbasictimer.cpp",
        QT_BASE + "/src/corelib/kernel/qchronotimer.cpp",
        QT_BASE + "/src/corelib/kernel/qcoreapplication.cpp",
        QT_BASE + "/src/corelib/kernel/qcoreevent.cpp",
        QT_BASE + "/src/corelib/kernel/qdeadlinetimer.cpp",
        QT_BASE + "/src/corelib/kernel/qelapsedtimer.cpp",
        QT_BASE + "/src/corelib/kernel/qeventloop.cpp",
        QT_BASE + "/src/corelib/kernel/qiterable.cpp",
        QT_BASE + "/src/corelib/kernel/qmath.cpp",
        QT_BASE + "/src/corelib/kernel/qmetacontainer.cpp",
        QT_BASE + "/src/corelib/kernel/qmetaobject.cpp",
        QT_BASE + "/src/corelib/kernel/qmetaobjectbuilder.cpp",
        QT_BASE + "/src/corelib/kernel/qmetatype.cpp",
        QT_BASE + "/src/corelib/kernel/qmimedata.cpp",
        QT_BASE + "/src/corelib/kernel/qobject.cpp",
        QT_BASE + "/src/corelib/kernel/qobjectcleanuphandler.cpp",
        QT_BASE + "/src/corelib/kernel/qproperty.cpp",
        QT_BASE + "/src/corelib/kernel/qsequentialiterable.cpp",
        QT_BASE + "/src/corelib/kernel/qsignalmapper.cpp",
        QT_BASE + "/src/corelib/kernel/qsingleshottimer.cpp",
        QT_BASE + "/src/corelib/kernel/qsocketnotifier.cpp",
        QT_BASE + "/src/corelib/kernel/qsystemerror.cpp",
        QT_BASE + "/src/corelib/kernel/qtestsupport_core.cpp",
        QT_BASE + "/src/corelib/kernel/qtimer.cpp",
        QT_BASE + "/src/corelib/kernel/qtranslator.cpp",
        QT_BASE + "/src/corelib/kernel/qvariant.cpp",
        QT_BASE + "/src/corelib/plugin/qfactoryinterface.cpp",
        QT_BASE + "/src/corelib/plugin/qfactoryloader.cpp",
        QT_BASE + "/src/corelib/plugin/qpluginloader.cpp",
        QT_BASE + "/src/corelib/plugin/quuid.cpp",
        QT_BASE + "/src/corelib/serialization/qcborcommon.cpp",
        QT_BASE + "/src/corelib/serialization/qcbordiagnostic.cpp",
        QT_BASE + "/src/corelib/serialization/qcborvalue.cpp",
        QT_BASE + "/src/corelib/serialization/qdatastream.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonarray.cpp",
        QT_BASE + "/src/corelib/serialization/qjsoncbor.cpp",
        QT_BASE + "/src/corelib/serialization/qjsondocument.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonobject.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonparser.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonvalue.cpp",
        QT_BASE + "/src/corelib/serialization/qjsonwriter.cpp",
        QT_BASE + "/src/corelib/serialization/qtextstream.cpp",
        QT_BASE + "/src/corelib/serialization/qxmlutils.cpp",
        QT_BASE + "/src/corelib/text/qanystringview.cpp",
        QT_BASE + "/src/corelib/text/qbytearray.cpp",
        QT_BASE + "/src/corelib/text/qbytearraylist.cpp",
        QT_BASE + "/src/corelib/text/qbytearraymatcher.cpp",
        QT_BASE + "/src/corelib/text/qcollator.cpp",
        QT_BASE + "/src/corelib/text/qlatin1stringmatcher.cpp",
        QT_BASE + "/src/corelib/text/qlocale.cpp",
        QT_BASE + "/src/corelib/text/qlocale_tools.cpp",
        QT_BASE + "/src/corelib/text/qstring.cpp",
        QT_BASE + "/src/corelib/text/qstringbuilder.cpp",
        QT_BASE + "/src/corelib/text/qstringconverter.cpp",
        QT_BASE + "/src/corelib/text/qstringlist.cpp",
        QT_BASE + "/src/corelib/text/qstringtokenizer.cpp",
        QT_BASE + "/src/corelib/text/qstringview.cpp",
        QT_BASE + "/src/corelib/text/qtextboundaryfinder.cpp",
        QT_BASE + "/src/corelib/text/qunicodetools.cpp",
        QT_BASE + "/src/corelib/text/qvsnprintf.cpp",
        QT_BASE + "/src/corelib/thread/qrunnable.cpp",
        QT_BASE + "/src/corelib/thread/qthread.cpp",
        QT_BASE + "/src/corelib/time/qcalendar.cpp",
        QT_BASE + "/src/corelib/time/qdatetime.cpp",
        QT_BASE + "/src/corelib/time/qgregoriancalendar.cpp",
        QT_BASE + "/src/corelib/time/qjuliancalendar.cpp",
        QT_BASE + "/src/corelib/time/qlocaltime.cpp",
        QT_BASE + "/src/corelib/time/qmilankoviccalendar.cpp",
        QT_BASE + "/src/corelib/time/qromancalendar.cpp",
        QT_BASE + "/src/corelib/time/qtimezone.cpp",
        QT_BASE + "/src/corelib/tools/qarraydata.cpp",
        QT_BASE + "/src/corelib/tools/qbitarray.cpp",
        QT_BASE + "/src/corelib/tools/qcontiguouscache.cpp",
        QT_BASE + "/src/corelib/tools/qcryptographichash.cpp",
        QT_BASE + "/src/corelib/tools/qfreelist.cpp",
        QT_BASE + "/src/corelib/tools/qfunctionaltools_impl.cpp",
        QT_BASE + "/src/corelib/tools/qline.cpp",
        QT_BASE + "/src/corelib/tools/qmargins.cpp",
        QT_BASE + "/src/corelib/tools/qpoint.cpp",
        QT_BASE + "/src/corelib/tools/qrect.cpp",
        QT_BASE + "/src/corelib/tools/qrefcount.cpp",
        QT_BASE + "/src/corelib/tools/qringbuffer.cpp",
        QT_BASE + "/src/corelib/tools/qshareddata.cpp",
        QT_BASE + "/src/corelib/tools/qsharedpointer.cpp",
        QT_BASE + "/src/corelib/tools/qsize.cpp",
        QT_BASE + "/src/corelib/tools/qtyperevision.cpp",
        QT_BASE + "/src/corelib/tools/qversionnumber.cpp",
        QT_BASE + "/src/corelib/global/qversiontagging.cpp",
        QT_BASE + "/src/corelib/serialization/qxmlstream.cpp",
        QT_BASE + "/src/corelib/serialization/qxmlstreamgrammar.cpp",
        QT_BASE + "/src/corelib/animation/qabstractanimation.cpp",
        QT_BASE + "/src/corelib/animation/qanimationgroup.cpp",
        QT_BASE + "/src/corelib/animation/qparallelanimationgroup.cpp",
        QT_BASE + "/src/corelib/animation/qpauseanimation.cpp",
        QT_BASE + "/src/corelib/animation/qpropertyanimation.cpp",
        QT_BASE + "/src/corelib/animation/qsequentialanimationgroup.cpp",
        QT_BASE + "/src/corelib/animation/qvariantanimation.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemengine_unix.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemiterator_unix.cpp",
        QT_BASE + "/src/corelib/io/qfsfileengine_unix.cpp",
        QT_BASE + "/src/corelib/io/qlockfile_unix.cpp",
        QT_BASE + "/src/corelib/kernel/qcore_unix.cpp",
        QT_BASE + "/src/corelib/kernel/qtimerinfo_unix.cpp",
        QT_BASE + "/src/corelib/thread/qthread_unix.cpp",
        QT_BASE + "/src/corelib/kernel/qeventdispatcher_unix.cpp",
        QT_BASE + "/src/corelib/thread/qatomic.cpp",
        QT_BASE + "/src/corelib/thread/qmutex.cpp",
        QT_BASE + "/src/corelib/thread/qreadwritelock.cpp",
        QT_BASE + "/src/corelib/thread/qsemaphore.cpp",
        QT_BASE + "/src/corelib/thread/qthreadpool.cpp",
        QT_BASE + "/src/corelib/thread/qthreadstorage.cpp",
        QT_BASE + "/src/corelib/thread/qwaitcondition_unix.cpp",
        QT_BASE + "/src/corelib/thread/qexception.cpp",
        QT_BASE + "/src/corelib/thread/qfutureinterface.cpp",
        QT_BASE + "/src/corelib/thread/qfuturewatcher.cpp",
        QT_BASE + "/src/corelib/thread/qresultstore.cpp",
        QT_BASE + "/src/corelib/tools/qcommandlineoption.cpp",
        QT_BASE + "/src/corelib/tools/qcommandlineparser.cpp",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/bignum.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/bignum-dtoa.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/cached-powers.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/double-to-string.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/fast-dtoa.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/fixed-dtoa.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/string-to-double.cc",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion/strtod.cc",
        QT_BASE + "/src/corelib/tools/qeasingcurve.cpp",
        QT_BASE + "/src/corelib/tools/qtimeline.cpp",
        QT_BASE + "/src/corelib/text/qlocale_unix.cpp",
        QT_BASE + "/src/corelib/text/qcollator_icu.cpp",
        QT_BASE + "/src/corelib/text/qlocale_icu.cpp",
        QT_BASE + "/src/corelib/text/qregularexpression.cpp",
        QT_BASE + "/src/corelib/time/qhijricalendar.cpp",
        QT_BASE + "/src/corelib/time/qislamiccivilcalendar.cpp",
        QT_BASE + "/src/corelib/time/qjalalicalendar.cpp",
        QT_BASE + "/src/corelib/time/qtimezoneprivate.cpp",
        QT_BASE + "/src/corelib/time/qtimezoneprivate_tz.cpp",
        QT_BASE + "/src/corelib/time/qtimezonelocale.cpp",
        QT_BASE + "/src/corelib/time/qdatetimeparser.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher_polling.cpp",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher_inotify.cpp",
        QT_BASE + "/src/corelib/io/qprocess.cpp",
        QT_BASE + "/src/corelib/io/qprocess_unix.cpp",
        QT_BASE + "/src/corelib/io/qsettings.cpp",
        QT_BASE + "/src/corelib/io/forkfd_qt.c",
        QT_BASE + "/src/corelib/io/qstandardpaths_unix.cpp",
        QT_BASE + "/src/corelib/io/qstorageinfo_linux.cpp",
        QT_BASE + "/src/corelib/itemmodels/qabstractitemmodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qitemselectionmodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qabstractproxymodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qconcatenatetablesproxymodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qidentityproxymodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qsortfilterproxymodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qtransposeproxymodel.cpp",
        QT_BASE + "/src/corelib/itemmodels/qstringlistmodel.cpp",
        QT_BASE + "/src/corelib/plugin/qlibrary.cpp",
        QT_BASE + "/src/corelib/plugin/qelfparser_p.cpp",
        QT_BASE + "/src/corelib/plugin/qlibrary_unix.cpp",
        QT_BASE + "/src/corelib/kernel/qeventdispatcher_glib.cpp",
        QT_BASE + "/src/corelib/ipc/qsharedmemory_posix.cpp",
        QT_BASE + "/src/corelib/ipc/qsharedmemory_systemv.cpp",
        QT_BASE + "/src/corelib/ipc/qsystemsemaphore_posix.cpp",
        QT_BASE + "/src/corelib/ipc/qsystemsemaphore_systemv.cpp",
        QT_BASE + "/src/corelib/serialization/qcborstreamreader.cpp",
        QT_BASE + "/src/corelib/serialization/qcborstreamwriter.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimedatabase.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimeglobpattern.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimemagicrule.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimemagicrulematcher.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimeprovider.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimetype.cpp",
        QT_BASE + "/src/corelib/mimetypes/qmimetypeparser.cpp",
        QT_BASE + "/src/corelib/kernel/qpermissions.cpp",
    ],
    hdrs = glob(
        include = [
            QT_BASE + "/build/src/corelib/**/*.h",
            QT_BASE + "/build/src/corelib/global/qconfig.cpp",
            QT_BASE + "/build/src/corelib/.rcc/*.cpp",
            QT_BASE + "/build/src/corelib/kernel/moc_qobject.cpp",
            QT_BASE + "/build/include/QtCore/**/*",
            # QT_BASE + "/build/include/QtPlatformHeaders/**/*",
            QT_BASE + "/mkspecs/**/*.h",
            QT_BASE + "/src/3rdparty/forkfd/**/*",
            # QT_BASE + "/src/3rdparty/harfbuzz/src/**/*.h",
            QT_BASE + "/src/3rdparty/md4/**/*.h",
            QT_BASE + "/src/3rdparty/tinycbor/src/**/*",
            QT_BASE + "/src/3rdparty/double-conversion/**/*.h",
            QT_BASE + "/src/3rdparty/siphash/**/*",
            QT_BASE + "/src/3rdparty/easing/**/*",
            QT_BASE + "/src/corelib/**/*.h",
            QT_BASE + "/src/corelib/global/*.cpp",
            QT_BASE + "/src/corelib/serialization/*.cpp",
            QT_BASE + "/src/corelib/text/*.cpp",
            QT_BASE + "/src/3rdparty/sha1/sha1.cpp",
            QT_BASE + "/src/3rdparty/rfc6234/*",
            QT_BASE + "/src/3rdparty/md5/md5.h",
            QT_BASE + "/src/3rdparty/md5/md5.cpp",
            QT_BASE + "/src/3rdparty/md4/md4.cpp",
            QT_BASE + "/src/3rdparty/sha3/*",
            QT_BASE + "/src/3rdparty/blake2/src/*",
            # QT_BASE + "/src/platformheaders/**/*.h",
            QT_BASE + "/src/testlib/3rdparty/valgrind/**/*.h",
        ],
        exclude = [
            QT_BASE + "/src/corelib/global/qconfig-bootstrapped.h",
        ],
    ),
    additional_linker_inputs = [
        QT_BASE + "/build/src/corelib/Core.version",
        QT_BASE + "/src/corelib/QtCore.dynlist",
    ],
    copts = common_copts + [
        "-Ithird_party/glib/glib",
        "-Ithird_party/icu/include",
        "-Ithird_party/libexecinfo",
        "-O3",
        "-U_FORTIFY_SOURCE",
        "-Wall",
        "-Wextra",
        "-Wl,--enable-new-dtags",
        "-Wl,--no-undefined",
        "-Wl,-Bsymbolic-functions",
        "-Wl,-e,qt_core_boilerplate",
        "-Wl,-rpath,:::::::",
        "-Wl,-z,relro,-z,now",
        "-Wsuggest-override",
        "-fPIC",
        "-fvisibility-inlines-hidden",
        "-fvisibility=hidden",
        "-ldl",
        "-lm",
        "-shared",
        "-std=gnu++20",
        "-std=gnu11",
    ],
    includes = [
        QT_BASE + "/build/include",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
        QT_BASE + "/build/src/corelib",
        QT_BASE + "/build/src/corelib",
        QT_BASE + "/build/src/corelib/.rcc",
        QT_BASE + "/build/src/corelib/global",
        QT_BASE + "/build/src/corelib/kernel",
        QT_BASE + "/mkspecs/linux-g++",
        QT_BASE + "/src/3rdparty/blake2/src",
        QT_BASE + "/src/3rdparty/double-conversion/double-conversion",
        QT_BASE + "/src/3rdparty/double-conversion",
        QT_BASE + "/src/3rdparty/easing",
        QT_BASE + "/src/3rdparty/forkfd",
        QT_BASE + "/src/3rdparty/md4",
        QT_BASE + "/src/3rdparty/md5",
        QT_BASE + "/src/3rdparty/pcre2/src",
        QT_BASE + "/src/3rdparty/rfc6234",
        QT_BASE + "/src/3rdparty/sha1",
        QT_BASE + "/src/3rdparty/sha3",
        QT_BASE + "/src/3rdparty/siphash",
        QT_BASE + "/src/3rdparty/tinycbor/src",
        QT_BASE + "/src/corelib",
        QT_BASE + "/src/corelib/.moc",
        QT_BASE + "/src/corelib/global",
        QT_BASE + "/src/corelib/serialization",
        QT_BASE + "/src/corelib/text",
        QT_BASE + "/src/corelib/thread",
        QT_BASE + "/src/testlib/3rdparty/valgrind",
    ],
    linkopts = [
        "-ldl",
        "-lm",
        "-lrt",
        "-Wl,--allow-multiple-definition",
    ],
    linkstatic = True,
    local_defines = common_defines + [
        "BACKTRACE_HEADER=\\\"execinfo.h\\\"",
        "Core_EXPORTS",
        "ELF_INTERPRETER=\\\"/lib64/ld-linux-x86-64.so.2\\\"",
        "NDEBUG",
        "QT_ASCII_CAST_WARNINGS",
        "QT_BUILDING_QT",
        "QT_BUILD_CORE_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_LEAN_HEADERS=1",
        "QT_MOC_COMPAT",
        "QT_NO_CAST_TO_ASCII",
        # "QT_NO_CONTEXTLESS_CONNECT",
        "QT_NO_DEBUG",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QPAIR",
        "QT_NO_QSNPRINTF",
        "QT_NO_USING_NAMESPACE",
        "QT_TYPESAFE_FLAGS",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "_FORTIFY_SOURCE=3",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    moc_hdrs = [
        QT_BASE + "/src/corelib/thread/qfutureinterface.cpp",
        QT_BASE + "/src/corelib/thread/qthreadpool.cpp",
        QT_BASE + "/src/corelib/itemmodels/qabstractitemmodel.cpp",
        QT_BASE + "/src/corelib/thread/qfuturewatcher.h",
        QT_BASE + "/src/corelib/io/qprocess.h",
        QT_BASE + "/src/corelib/animation/qabstractanimation.h",
        QT_BASE + "/src/corelib/kernel/qchronotimer.h",
        QT_BASE + "/src/corelib/tools/qcryptographichash.h",
        QT_BASE + "/src/corelib/kernel/qsignalmapper.h",
        QT_BASE + "/src/corelib/itemmodels/qsortfilterproxymodel.h",
        QT_BASE + "/src/corelib/thread/qthread.h",
        QT_BASE + "/src/corelib/animation/qanimationgroup.h",
        QT_BASE + "/src/corelib/kernel/qsingleshottimer_p.h",
        QT_BASE + "/src/corelib/serialization/qcborcommon.h",
        QT_BASE + "/src/corelib/animation/qparallelanimationgroup.h",
        QT_BASE + "/src/corelib/kernel/qmimedata.h",
        QT_BASE + "/src/corelib/itemmodels/qstringlistmodel.h",
        QT_BASE + "/src/corelib/text/qlocale.h",
        QT_BASE + "/src/corelib/kernel/qobjectcleanuphandler.h",
        QT_BASE + "/src/corelib/kernel/qabstracteventdispatcher.h",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher_p.h",
        QT_BASE + "/src/corelib/kernel/qeventloop.h",
        QT_BASE + "/src/corelib/plugin/qlibrary.h",
        QT_BASE + "/src/corelib/animation/qpauseanimation.h",
        QT_BASE + "/src/corelib/itemmodels/qabstractitemmodel.h",
        QT_BASE + "/src/corelib/serialization/qcborvalue.h",
        QT_BASE + "/src/corelib/io/qfileselector.h",
        QT_BASE + "/src/corelib/plugin/qfactoryloader_p.h",
        QT_BASE + "/src/corelib/serialization/qtextstream_p.h",
        QT_BASE + "/src/corelib/plugin/qpluginloader.h",
        QT_BASE + "/src/corelib/animation/qabstractanimation_p.h",
        QT_BASE + "/src/corelib/kernel/qtimer.h",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher_polling_p.h",
        QT_BASE + "/src/corelib/kernel/qpermissions.h",
        QT_BASE + "/src/corelib/io/qsavefile.h",
        QT_BASE + "/src/corelib/io/qbuffer.h",
        QT_BASE + "/src/corelib/io/qtemporaryfile.h",
        QT_BASE + "/src/corelib/io/qfile.h",
        QT_BASE + "/src/corelib/mimetypes/qmimetype.h",
        QT_BASE + "/src/corelib/kernel/qeventdispatcher_unix_p.h",
        QT_BASE + "/src/corelib/io/qnoncontiguousbytedevice_p.h",
        QT_BASE + "/src/corelib/serialization/qcborstreamreader.h",
        QT_BASE + "/src/corelib/itemmodels/qitemselectionmodel.h",
        QT_BASE + "/src/corelib/kernel/qtranslator.h",
        QT_BASE + "/src/corelib/animation/qsequentialanimationgroup.h",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher.h",
        QT_BASE + "/src/corelib/itemmodels/qtransposeproxymodel.h",
        QT_BASE + "/src/corelib/animation/qpropertyanimation.h",
        QT_BASE + "/src/corelib/kernel/qcoreapplication.h",
        QT_BASE + "/src/corelib/ipc/qsystemsemaphore.h",
        QT_BASE + "/src/corelib/ipc/qtipccommon.h",
        QT_BASE + "/src/corelib/itemmodels/qconcatenatetablesproxymodel.h",
        QT_BASE + "/src/corelib/itemmodels/qabstractproxymodel.h",
        QT_BASE + "/src/corelib/itemmodels/qidentityproxymodel.h",
        QT_BASE + "/src/corelib/io/qfiledevice.h",
        QT_BASE + "/src/corelib/tools/qeasingcurve.h",
        QT_BASE + "/src/corelib/kernel/qcoreevent.h",
        QT_BASE + "/src/corelib/animation/qvariantanimation.h",
        QT_BASE + "/src/corelib/kernel/qsocketnotifier.h",
        QT_BASE + "/src/corelib/tools/qtimeline.h",
        QT_BASE + "/src/corelib/io/qsettings.h",
        QT_BASE + "/src/corelib/thread/qthreadpool.h",
        QT_BASE + "/src/corelib/io/qiodevice.h",
        QT_BASE + "/src/corelib/io/qfilesystemwatcher_inotify_p.h",
        QT_BASE + "/src/corelib/io/qstandardpaths.h",
        QT_BASE + "/src/corelib/ipc/qsharedmemory.h",
        QT_BASE + "/src/corelib/time/qcalendar.h",
        QT_BASE + "/src/corelib/global/qnamespace.h",
        QT_BASE + "/src/corelib/kernel/qeventdispatcher_glib_p.h",
    ],
    deps = [
        ":qt_pcre2",
        "@glib//glib",
        "@icu//icu4c/source/common:platform",
        "@icu//icu4c/source/i18n:collation",
        "@icu//icu4c/source/common:uset_props",
        "@zlib",
        # "//third_party/glib/glib",
        # "//third_party/icu",
        # "//third_party/libexecinfo",
        # "//third_party/zlib:zlibonly",
    ],
)

cc_binary(
    name = "rcc",
    srcs = [
        QT_BASE + "/src/tools/rcc/main.cpp",
        QT_BASE + "/src/tools/rcc/rcc.cpp",
        QT_BASE + "/src/tools/rcc/rcc.h",
        QT_BASE + "/build/src/tools/rcc/rcc_autogen/mocs_compilation.cpp",
    ],
    copts = common_copts + [
        "-Wl,-z,relro,-z,now ",
        "-Wl,--enable-new-dtags ",
        "-fPIE -pie",
    ],
    includes = common_includes + [
        QT_BASE + "/src/tools/rcc",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
        QT_BASE + "/build/include",
        QT_BASE + "/build/src/corelib",
    ],
    linkstatic = True,
    local_defines = [
        "QT_CORE_LIB",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_LEAN_HEADERS=1",
        "QT_NO_CAST_FROM_ASCII",
        "QT_NO_DEBUG",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_RCC",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    deps = [
        ":core",
    ],
)

qt_internal_library(
    name = "concurrent",
    srcs = [
        QT_BASE + "/src/concurrent/qtconcurrentfilter.cpp",
        QT_BASE + "/src/concurrent/qtconcurrentiteratekernel.cpp",
        QT_BASE + "/src/concurrent/qtconcurrentmap.cpp",
        QT_BASE + "/src/concurrent/qtconcurrentrun.cpp",
        QT_BASE + "/src/concurrent/qtconcurrentthreadengine.cpp",
    ],
    hdrs = glob([
        QT_BASE + "/src/concurrent/**/*.h",
        QT_BASE + "/build/include/QtConcurrent/**/*",
    ]),
    additional_linker_inputs = [
        QT_BASE + "/build/src/concurrent/Concurrent.version",
    ],
    copts = common_copts + [
        "-fPIC",
        "-DNDEBUG",
        "-Wl,-Bsymbolic-functions",
        "-Wl,--no-undefined",
        "-Wl,-z,relro,-z,now",
        "-Wl,--enable-new-dtags",
    ],
    includes = common_includes + [
        QT_BASE + "/build/include",
        QT_BASE + "/build/include/QtConcurrent",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
    ],
    linkstatic = True,
    local_defines = [
        "Concurrent_EXPORTS",
        "QT_ASCII_CAST_WARNINGS",
        "QT_BUILDING_QT",
        "QT_BUILD_CONCURRENT_LIB",
        "QT_CORE_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_LEAN_HEADERS=1",
        "QT_MOC_COMPAT",
        "QT_NO_CAST_TO_ASCII",
        # "QT_NO_CONTEXTLESS_CONNECT",
        "QT_NO_DEBUG",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_NO_USING_NAMESPACE",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "uic",
    srcs = [
        QT_BASE + "/build/src/tools/uic/uic_autogen/mocs_compilation.cpp",
        QT_BASE + "/src/tools/uic/cpp/cppwritedeclaration.cpp",
        QT_BASE + "/src/tools/uic/cpp/cppwriteincludes.cpp",
        QT_BASE + "/src/tools/uic/cpp/cppwriteinitialization.cpp",
        QT_BASE + "/src/tools/uic/customwidgetsinfo.cpp",
        QT_BASE + "/src/tools/uic/databaseinfo.cpp",
        QT_BASE + "/src/tools/uic/driver.cpp",
        QT_BASE + "/src/tools/uic/main.cpp",
        QT_BASE + "/src/tools/uic/python/pythonwritedeclaration.cpp",
        QT_BASE + "/src/tools/uic/python/pythonwriteimports.cpp",
        QT_BASE + "/src/tools/uic/shared/language.cpp",
        QT_BASE + "/src/tools/uic/shared/writeincludesbase.cpp",
        QT_BASE + "/src/tools/uic/treewalker.cpp",
        QT_BASE + "/src/tools/uic/ui4.cpp",
        QT_BASE + "/src/tools/uic/uic.cpp",
        QT_BASE + "/src/tools/uic/validator.cpp",
    ],
    copts = common_copts + [
        "-Iqt_source/{}/src/tools/uic".format(QT_BASE),
        "-Iqt_source/{}/src/tools/uic/shared".format(QT_BASE),
        "-Iqt_source/{}/src/tools/uic/cpp".format(QT_BASE),
        "-Iqt_source/{}/src/tools/uic/python".format(QT_BASE),
        "-DNDEBUG",
        "-O2",
        "-Wl,-z,relro,-z,now",
        "-Wl,--enable-new-dtags",
        "-fPIE -pie",
    ],
    includes = [
        #"./{}/src/tools/uic/".format(QT_BASE),
    ],
    local_defines = [
        "QT_UIC",
        "QT_CORE_LIB",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_LEAN_HEADERS=1",
        "QT_NO_CAST_FROM_ASCII",
        "QT_NO_DEBUG",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    deps = [
        ":common_headers",
        ":core",
    ],
)

qt_internal_library(
    name = "dbus",
    srcs = [
        QT_BASE + "/src/dbus/qdbus_symbols.cpp",
        QT_BASE + "/src/dbus/qdbusabstractadaptor.cpp",
        QT_BASE + "/src/dbus/qdbusabstractinterface.cpp",
        QT_BASE + "/src/dbus/qdbusargument.cpp",
        QT_BASE + "/src/dbus/qdbusconnection.cpp",
        QT_BASE + "/src/dbus/qdbusconnectioninterface.cpp",
        QT_BASE + "/src/dbus/qdbusconnectionmanager.cpp",
        QT_BASE + "/src/dbus/qdbuscontext.cpp",
        QT_BASE + "/src/dbus/qdbuserror.cpp",
        QT_BASE + "/src/dbus/qdbusextratypes.cpp",
        QT_BASE + "/src/dbus/qdbusintegrator.cpp",
        QT_BASE + "/src/dbus/qdbusinterface.cpp",
        QT_BASE + "/src/dbus/qdbusinternalfilters.cpp",
        QT_BASE + "/src/dbus/qdbusintrospection.cpp",
        QT_BASE + "/src/dbus/qdbusmessage.cpp",
        QT_BASE + "/src/dbus/qdbusmetaobject.cpp",
        QT_BASE + "/src/dbus/qdbusmetatype.cpp",
        QT_BASE + "/src/dbus/qdbusmisc.cpp",
        QT_BASE + "/src/dbus/qdbuspendingcall.cpp",
        QT_BASE + "/src/dbus/qdbuspendingreply.cpp",
        QT_BASE + "/src/dbus/qdbusreply.cpp",
        QT_BASE + "/src/dbus/qdbusserver.cpp",
        QT_BASE + "/src/dbus/qdbusservicewatcher.cpp",
        QT_BASE + "/src/dbus/qdbusunixfiledescriptor.cpp",
        QT_BASE + "/src/dbus/qdbusutil.cpp",
        QT_BASE + "/src/dbus/qdbusvirtualobject.cpp",
        QT_BASE + "/src/dbus/qdbusxmlgenerator.cpp",
        QT_BASE + "/src/dbus/qdbusxmlparser.cpp",
    ],
    hdrs = glob([
        QT_BASE + "/src/dbus/**/*.h",
        QT_BASE + "/build/include/QtDBus/**/*",
        QT_BASE + "/src/dbus/qdbusmarshaller.cpp",
        QT_BASE + "/src/dbus/qdbusdemarshaller.cpp",
    ]),
    additional_linker_inputs = [
        QT_BASE + "/build/src/dbus/DBus.version",
    ],
    copts = common_copts + [
        "-fPIC",
        "-DNDEBUG",
        "-O2",
        "-Wl,-Bsymbolic-functions",
        "-Wl,--no-undefined",
        "-Wl,-z,relro,-z,now",
        "-Wl,--enable-new-dtags",
    ],
    includes = common_includes + [
        QT_BASE + "/build/include",
        QT_BASE + "/build/include/QtDBus",
        QT_BASE + "/src/dbus",
        QT_BASE + "/build/src/dbus",
        QT_BASE + "/build/include/QtDBus/" + QT_VERSION,
        QT_BASE + "/build/include/QtDBus/" + QT_VERSION + "/QtDBus",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/mkspecs/linux-g++",
        QT_BASE + "/build/src/corelib",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
    ],
    linkstatic = True,
    local_defines = [
        "DBUS_API_SUBJECT_TO_CHANGE",
        "DBus_EXPORTS",
        "QT_ASCII_CAST_WARNINGS",
        "QT_BUILDING_QT",
        "QT_BUILD_DBUS_LIB",
        "QT_CORE_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_LEAN_HEADERS=1",
        "QT_LINKED_LIBDBUS",
        "QT_MOC_COMPAT",
        "QT_NO_CAST_TO_ASCII",
        # "QT_NO_CONTEXTLESS_CONNECT",
        "QT_NO_DEBUG",
        "QT_NO_EXCEPTIONS",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QPAIR",
        "QT_NO_QSNPRINTF",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    moc_hdrs = [
        QT_BASE + "/src/dbus/qdbusabstractadaptor.h",
        QT_BASE + "/src/dbus/qdbusabstractadaptor_p.h",
        QT_BASE + "/src/dbus/qdbusabstractinterface.h",
        QT_BASE + "/src/dbus/qdbusconnection.h",
        QT_BASE + "/src/dbus/qdbusconnectioninterface.h",
        QT_BASE + "/src/dbus/qdbusconnectionmanager_p.h",
        QT_BASE + "/src/dbus/qdbusconnection_p.h",
        QT_BASE + "/src/dbus/qdbuserror.h",
        QT_BASE + "/src/dbus/qdbuspendingcall.h",
        QT_BASE + "/src/dbus/qdbuspendingcall_p.h",
        QT_BASE + "/src/dbus/qdbusserver.h",
        QT_BASE + "/src/dbus/qdbusservicewatcher.h",
        QT_BASE + "/src/dbus/qdbusvirtualobject.h",
    ],
    deps = [
        ":core",
        "//interface_libs/dbus",
    ],
)

qt_internal_library(
    name = "gui",
    srcs = [
        QT_BASE + "/build/src/gui/Gui_autogen/mocs_compilation.cpp",
        QT_BASE + "/src/gui/compat/removed_api.cpp",
        QT_BASE + "/src/gui/image/qabstractfileiconengine.cpp",
        QT_BASE + "/src/gui/image/qabstractfileiconprovider.cpp",
        QT_BASE + "/src/gui/image/qbitmap.cpp",
        QT_BASE + "/src/gui/image/qfonticonengine.cpp",
        QT_BASE + "/src/gui/image/qbmphandler.cpp",
        QT_BASE + "/src/gui/image/qicon.cpp",
        QT_BASE + "/src/gui/image/qiconengine.cpp",
        QT_BASE + "/src/gui/image/qiconengineplugin.cpp",
        QT_BASE + "/src/gui/image/qiconloader.cpp",
        QT_BASE + "/src/gui/image/qimage.cpp",
        QT_BASE + "/src/gui/image/qimage_conversions.cpp",
        QT_BASE + "/src/gui/image/qimageiohandler.cpp",
        QT_BASE + "/src/gui/image/qimagepixmapcleanuphooks.cpp",
        QT_BASE + "/src/gui/image/qimagereader.cpp",
        QT_BASE + "/src/gui/image/qimagereaderwriterhelpers.cpp",
        QT_BASE + "/src/gui/image/qimagewriter.cpp",
        QT_BASE + "/src/gui/image/qpaintengine_pic.cpp",
        QT_BASE + "/src/gui/image/qpicture.cpp",
        QT_BASE + "/src/gui/image/qpixmap.cpp",
        QT_BASE + "/src/gui/image/qpixmap_blitter.cpp",
        QT_BASE + "/src/gui/image/qpixmap_raster.cpp",
        QT_BASE + "/src/gui/image/qpixmapcache.cpp",
        QT_BASE + "/src/gui/image/qplatformpixmap.cpp",
        QT_BASE + "/src/gui/image/qppmhandler.cpp",
        QT_BASE + "/src/gui/image/qxbmhandler.cpp",
        QT_BASE + "/src/gui/image/qxpmhandler.cpp",
        QT_BASE + "/src/gui/kernel/qclipboard.cpp",
        QT_BASE + "/src/gui/kernel/qcursor.cpp",
        QT_BASE + "/src/gui/kernel/qeventpoint.cpp",
        QT_BASE + "/src/gui/kernel/qevent.cpp",
        QT_BASE + "/src/gui/kernel/qgenericplugin.cpp",
        QT_BASE + "/src/gui/kernel/qgenericpluginfactory.cpp",
        QT_BASE + "/src/gui/kernel/qguiapplication.cpp",
        QT_BASE + "/src/gui/kernel/qguivariant.cpp",
        QT_BASE + "/src/gui/kernel/qhighdpiscaling.cpp",
        QT_BASE + "/src/gui/kernel/qinputdevice.cpp",
        QT_BASE + "/src/gui/kernel/qinputdevicemanager.cpp",
        QT_BASE + "/src/gui/kernel/qinputmethod.cpp",
        QT_BASE + "/src/gui/kernel/qinternalmimedata.cpp",
        QT_BASE + "/src/gui/kernel/qkeymapper.cpp",
        QT_BASE + "/src/gui/kernel/qoffscreensurface.cpp",
        QT_BASE + "/src/gui/kernel/qpaintdevicewindow.cpp",
        QT_BASE + "/src/gui/kernel/qpalette.cpp",
        QT_BASE + "/src/gui/kernel/qpixelformat.cpp",
        QT_BASE + "/src/gui/kernel/qplatformclipboard.cpp",
        QT_BASE + "/src/gui/kernel/qplatformcursor.cpp",
        QT_BASE + "/src/gui/kernel/qplatformdialoghelper.cpp",
        QT_BASE + "/src/gui/kernel/qplatformgraphicsbuffer.cpp",
        QT_BASE + "/src/gui/kernel/qplatformgraphicsbufferhelper.cpp",
        QT_BASE + "/src/gui/kernel/qplatforminputcontext.cpp",
        QT_BASE + "/src/gui/kernel/qplatforminputcontextfactory.cpp",
        QT_BASE + "/src/gui/kernel/qplatforminputcontextplugin.cpp",
        QT_BASE + "/src/gui/kernel/qplatformintegration.cpp",
        QT_BASE + "/src/gui/kernel/qplatformintegrationfactory.cpp",
        QT_BASE + "/src/gui/kernel/qplatformintegrationplugin.cpp",
        QT_BASE + "/src/gui/kernel/qplatformkeymapper.cpp",
        QT_BASE + "/src/gui/kernel/qplatformmenu.cpp",
        QT_BASE + "/src/gui/kernel/qplatformnativeinterface.cpp",
        QT_BASE + "/src/gui/kernel/qplatformoffscreensurface.cpp",
        QT_BASE + "/src/gui/kernel/qplatformscreen.cpp",
        QT_BASE + "/src/gui/kernel/qplatformservices.cpp",
        QT_BASE + "/src/gui/kernel/qplatformsessionmanager.cpp",
        QT_BASE + "/src/gui/kernel/qplatformsharedgraphicscache.cpp",
        QT_BASE + "/src/gui/kernel/qplatformsurface.cpp",
        QT_BASE + "/src/gui/kernel/qplatformsystemtrayicon.cpp",
        QT_BASE + "/src/gui/kernel/qplatformtheme.cpp",
        QT_BASE + "/src/gui/kernel/qplatformthemefactory.cpp",
        QT_BASE + "/src/gui/kernel/qplatformthemeplugin.cpp",
        QT_BASE + "/src/gui/kernel/qplatformwindow.cpp",
        QT_BASE + "/src/gui/kernel/qpointingdevice.cpp",
        QT_BASE + "/src/gui/kernel/qrasterwindow.cpp",
        QT_BASE + "/src/gui/kernel/qscreen.cpp",
        QT_BASE + "/src/gui/kernel/qsessionmanager.cpp",
        QT_BASE + "/src/gui/kernel/qstylehints.cpp",
        QT_BASE + "/src/gui/kernel/qsurface.cpp",
        QT_BASE + "/src/gui/kernel/qsurfaceformat.cpp",
        QT_BASE + "/src/gui/kernel/qtestsupport_gui.cpp",
        QT_BASE + "/src/gui/kernel/qwindow.cpp",
        QT_BASE + "/src/gui/kernel/qwindowsysteminterface.cpp",
        QT_BASE + "/src/gui/math3d/qgenericmatrix.cpp",
        QT_BASE + "/src/gui/math3d/qmatrix4x4.cpp",
        QT_BASE + "/src/gui/math3d/qquaternion.cpp",
        QT_BASE + "/src/gui/math3d/qvectornd.cpp",
        QT_BASE + "/src/gui/painting/qbackingstore.cpp",
        QT_BASE + "/src/gui/painting/qbackingstoredefaultcompositor.cpp",
        QT_BASE + "/src/gui/painting/qbackingstorerhisupport.cpp",
        QT_BASE + "/src/gui/painting/qbezier.cpp",
        QT_BASE + "/src/gui/painting/qblendfunctions.cpp",
        QT_BASE + "/src/gui/painting/qblittable.cpp",
        QT_BASE + "/src/gui/painting/qbrush.cpp",
        QT_BASE + "/src/gui/painting/qcolor.cpp",
        QT_BASE + "/src/gui/painting/qcolorspace.cpp",
        QT_BASE + "/src/gui/painting/qcolortransform.cpp",
        QT_BASE + "/src/gui/painting/qcolortrclut.cpp",
        QT_BASE + "/src/gui/painting/qcompositionfunctions.cpp",
        QT_BASE + "/src/gui/painting/qcosmeticstroker.cpp",
        QT_BASE + "/src/gui/painting/qemulationpaintengine.cpp",
        QT_BASE + "/src/gui/painting/qgrayraster.c",
        QT_BASE + "/src/gui/painting/qicc.cpp",
        QT_BASE + "/src/gui/painting/qimageeffects.cpp",
        QT_BASE + "/src/gui/painting/qimagescale.cpp",
        QT_BASE + "/src/gui/painting/qmemrotate.cpp",
        QT_BASE + "/src/gui/painting/qoutlinemapper.cpp",
        QT_BASE + "/src/gui/painting/qpagedpaintdevice.cpp",
        QT_BASE + "/src/gui/painting/qpagelayout.cpp",
        QT_BASE + "/src/gui/painting/qpageranges.cpp",
        QT_BASE + "/src/gui/painting/qpagesize.cpp",
        QT_BASE + "/src/gui/painting/qpaintdevice.cpp",
        QT_BASE + "/src/gui/painting/qpaintengine.cpp",
        QT_BASE + "/src/gui/painting/qpaintengine_blitter.cpp",
        QT_BASE + "/src/gui/painting/qpaintengine_raster.cpp",
        QT_BASE + "/src/gui/painting/qpaintengineex.cpp",
        QT_BASE + "/src/gui/painting/qpainter.cpp",
        QT_BASE + "/src/gui/painting/qpainterpath.cpp",
        QT_BASE + "/src/gui/painting/qpathclipper.cpp",
        QT_BASE + "/src/gui/painting/qpathsimplifier.cpp",
        QT_BASE + "/src/gui/painting/qpdf.cpp",
        QT_BASE + "/src/gui/painting/qpdfoutputintent.cpp",
        QT_BASE + "/src/gui/painting/qpdfwriter.cpp",
        QT_BASE + "/src/gui/painting/qpen.cpp",
        QT_BASE + "/src/gui/painting/qpixellayout.cpp",
        QT_BASE + "/src/gui/painting/qplatformbackingstore.cpp",
        QT_BASE + "/src/gui/painting/qpolygon.cpp",
        QT_BASE + "/src/gui/painting/qrasterizer.cpp",
        QT_BASE + "/src/gui/painting/qregion.cpp",
        QT_BASE + "/src/gui/painting/qstroker.cpp",
        QT_BASE + "/src/gui/painting/qtextureglyphcache.cpp",
        QT_BASE + "/src/gui/painting/qtransform.cpp",
        QT_BASE + "/src/gui/painting/qtriangulatingstroker.cpp",
        QT_BASE + "/src/gui/painting/qtriangulator.cpp",
        QT_BASE + "/src/gui/rhi/qrhi.cpp",
        QT_BASE + "/src/gui/rhi/qrhinull.cpp",
        QT_BASE + "/src/gui/rhi/qshader.cpp",
        QT_BASE + "/src/gui/rhi/qshaderdescription.cpp",
        QT_BASE + "/src/gui/text/qabstracttextdocumentlayout.cpp",
        QT_BASE + "/src/gui/text/qdistancefield.cpp",
        QT_BASE + "/src/gui/text/qfont.cpp",
        QT_BASE + "/src/gui/text/qcolrpaintgraphrenderer.cpp",
        QT_BASE + "/src/gui/text/qfontdatabase.cpp",
        QT_BASE + "/src/gui/text/qfontengine.cpp",
        QT_BASE + "/src/gui/text/qfontengineglyphcache.cpp",
        QT_BASE + "/src/gui/text/qfontmetrics.cpp",
        QT_BASE + "/src/gui/text/qfontsubset.cpp",
        QT_BASE + "/src/gui/text/qfontvariableaxis.cpp",
        QT_BASE + "/src/gui/text/qfragmentmap.cpp",
        QT_BASE + "/src/gui/text/qglyphrun.cpp",
        QT_BASE + "/src/gui/text/qinputcontrol.cpp",
        QT_BASE + "/src/gui/text/qplatformfontdatabase.cpp",
        QT_BASE + "/src/gui/text/qrawfont.cpp",
        QT_BASE + "/src/gui/text/qstatictext.cpp",
        QT_BASE + "/src/gui/text/qsyntaxhighlighter.cpp",
        QT_BASE + "/src/gui/text/qtextcursor.cpp",
        QT_BASE + "/src/gui/text/qtextdocument.cpp",
        QT_BASE + "/src/gui/text/qtextdocument_p.cpp",
        QT_BASE + "/src/gui/text/qtextdocumentfragment.cpp",
        QT_BASE + "/src/gui/text/qtextdocumentlayout.cpp",
        QT_BASE + "/src/gui/text/qtextdocumentwriter.cpp",
        QT_BASE + "/src/gui/text/qtextengine.cpp",
        QT_BASE + "/src/gui/text/qtextformat.cpp",
        QT_BASE + "/src/gui/text/qtexthtmlparser.cpp",
        QT_BASE + "/src/gui/text/qtextimagehandler.cpp",
        QT_BASE + "/src/gui/text/qtextlayout.cpp",
        QT_BASE + "/src/gui/text/qtextlist.cpp",
        QT_BASE + "/src/gui/text/qtextobject.cpp",
        QT_BASE + "/src/gui/text/qtextoption.cpp",
        QT_BASE + "/src/gui/text/qtexttable.cpp",
        QT_BASE + "/src/gui/util/qabstractlayoutstyleinfo.cpp",
        QT_BASE + "/src/gui/util/qastchandler.cpp",
        QT_BASE + "/src/gui/util/qdesktopservices.cpp",
        QT_BASE + "/src/gui/util/qgridlayoutengine.cpp",
        QT_BASE + "/src/gui/util/qktxhandler.cpp",
        QT_BASE + "/src/gui/util/qlayoutpolicy.cpp",
        QT_BASE + "/src/gui/util/qpkmhandler.cpp",
        QT_BASE + "/src/gui/util/qtexturefiledata.cpp",
        QT_BASE + "/src/gui/util/qtexturefilereader.cpp",
        QT_BASE + "/src/gui/util/qvalidator.cpp",
        QT_BASE + "/src/gui/itemmodels/qstandarditemmodel.cpp",
        QT_BASE + "/src/gui/kernel/qopenglcontext.cpp",
        QT_BASE + "/src/gui/kernel/qplatformopenglcontext.cpp",
        QT_BASE + "/src/gui/opengl/qopengl.cpp",
        QT_BASE + "/src/gui/opengl/qopenglfunctions.cpp",
        QT_BASE + "/src/gui/opengl/qopenglprogrambinarycache.cpp",
        QT_BASE + "/src/gui/rhi/qrhigles2.cpp",
        QT_BASE + "/src/gui/animation/qguivariantanimation.cpp",
        QT_BASE + "/src/gui/opengl/platform/egl/qeglconvenience.cpp",
        QT_BASE + "/src/gui/opengl/platform/egl/qeglstreamconvenience.cpp",
        QT_BASE + "/src/gui/accessible/qaccessible.cpp",
        QT_BASE + "/src/gui/accessible/qaccessiblebridge.cpp",
        QT_BASE + "/src/gui/accessible/qaccessiblebridgeutils.cpp",
        QT_BASE + "/src/gui/accessible/qaccessiblecache.cpp",
        QT_BASE + "/src/gui/accessible/qaccessibleobject.cpp",
        QT_BASE + "/src/gui/accessible/qaccessibleplugin.cpp",
        QT_BASE + "/src/gui/accessible/qplatformaccessibility.cpp",
        QT_BASE + "/src/gui/kernel/qaction.cpp",
        QT_BASE + "/src/gui/kernel/qactiongroup.cpp",
        QT_BASE + "/src/gui/kernel/qdnd.cpp",
        QT_BASE + "/src/gui/kernel/qdrag.cpp",
        QT_BASE + "/src/gui/kernel/qplatformdrag.cpp",
        QT_BASE + "/src/gui/kernel/qshapedpixmapdndwindow.cpp",
        QT_BASE + "/src/gui/kernel/qsimpledrag.cpp",
        QT_BASE + "/src/gui/kernel/qkeysequence.cpp",
        QT_BASE + "/src/gui/kernel/qshortcut.cpp",
        QT_BASE + "/src/gui/kernel/qshortcutmap.cpp",
        QT_BASE + "/src/gui/image/qmovie.cpp",
        QT_BASE + "/src/gui/image/qpnghandler.cpp",
        QT_BASE + "/src/gui/painting/qdrawhelper_sse2.cpp",
        QT_BASE + "/src/gui/image/qimage_ssse3.cpp",
        QT_BASE + "/src/gui/painting/qdrawhelper_ssse3.cpp",
        QT_BASE + "/src/gui/painting/qdrawhelper_sse4.cpp",
        QT_BASE + "/src/gui/painting/qimagescale_sse4.cpp",
        QT_BASE + "/src/gui/painting/qdrawhelper_avx2.cpp",
        QT_BASE + "/src/gui/text/qharfbuzzng.cpp",
        QT_BASE + "/src/gui/text/qtextodfwriter.cpp",
        QT_BASE + "/src/gui/text/qtextmarkdownimporter.cpp",
        QT_BASE + "/src/3rdparty/md4c/md4c.c",
        QT_BASE + "/src/gui/text/qtextmarkdownwriter.cpp",
        QT_BASE + "/src/gui/painting/qcssutil.cpp",
        QT_BASE + "/src/gui/text/qcssparser.cpp",
        QT_BASE + "/src/gui/text/freetype/qfontengine_ft.cpp",
        QT_BASE + "/src/gui/text/freetype/qfreetypefontdatabase.cpp",
        QT_BASE + "/src/gui/text/unix/qfontconfigdatabase.cpp",
        QT_BASE + "/src/gui/text/unix/qfontenginemultifontconfig.cpp",
        QT_BASE + "/src/gui/util/qundostack.cpp",
        QT_BASE + "/src/gui/util/qundogroup.cpp",
        QT_BASE + "/src/gui/opengl/platform/unix/qglxconvenience.cpp",
        QT_BASE + "/src/gui/opengl/platform/egl/qeglpbuffer.cpp",
        QT_BASE + "/src/gui/opengl/platform/egl/qeglplatformcontext.cpp",
        QT_BASE + "/src/gui/itemmodels/qfileinfogatherer.cpp",
        QT_BASE + "/src/gui/itemmodels/qfilesystemmodel.cpp",
        QT_BASE + "/src/gui/platform/unix/qunixnativeinterface.cpp",
        QT_BASE + "/src/gui/platform/unix/qgenericunixeventdispatcher.cpp",
        QT_BASE + "/src/gui/platform/unix/qunixeventdispatcher.cpp",
        QT_BASE + "/src/gui/platform/unix/qeventdispatcher_glib.cpp",
        QT_BASE + "/src/gui/platform/unix/qdesktopunixservices.cpp",
        QT_BASE + "/src/gui/platform/unix/qtx11extras.cpp",
        QT_BASE + "/src/gui/platform/unix/qgenericunixthemes.cpp",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenuadaptor.cpp",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenubar.cpp",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenuconnection.cpp",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenuregistrarproxy.cpp",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenutypes.cpp",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusplatformmenu.cpp",
        QT_BASE + "/src/gui/platform/unix/dbustray/qdbustrayicon.cpp",
        QT_BASE + "/src/gui/platform/unix/dbustray/qdbustraytypes.cpp",
        QT_BASE + "/src/gui/platform/unix/dbustray/qstatusnotifieritemadaptor.cpp",
        QT_BASE + "/src/gui/platform/unix/dbustray/qxdgnotificationproxy.cpp",
        QT_BASE + "/src/gui/platform/unix/qxkbcommon.cpp",
        QT_BASE + "/src/gui/platform/unix/qxkbcommon_3rdparty.cpp",
        QT_BASE + "/src/gui/painting/qdrawhelper.cpp",
        QT_BASE + "/src/gui/util/qedidparser.cpp",
    ],
    hdrs = glob([
        QT_BASE + "/build/include/QtGui/**/*",
        QT_BASE + "/src/corelib/kernel/**/*.h",
        QT_BASE + "/build/include/QtDBus/**/*",
        QT_BASE + "/include/QtGui/**/*",
        QT_BASE + "/src/gui/**/*.h",
        QT_BASE + "/src/dbus/**/*.h",
        QT_BASE + "/build/src/gui/**/*.h",
        QT_BASE + "/src/gui/text/qcssparser.cpp",
        QT_BASE + "/src/gui/text/qcssscanner.cpp",
        QT_BASE + "/src/gui/text/qfontsubset_agl.cpp",
        QT_BASE + "/src/gui/painting/webgradients.cpp",
        QT_BASE + "/src/3rdparty/md4c/**/*.h",
    ]),
    additional_linker_inputs = [
        QT_BASE + "/build/src/gui/Gui.version",
        QT_BASE + "/src/gui/QtGui.dynlist",
    ],
    copts = [
        "-fPIC",
        "-DNDEBUG",
        "-O3",
        "-Wl,-Bsymbolic-functions",
        "-Wl,--no-undefined",
        "-Wl,-z,relro,-z,now",
        "-Wl,--enable-new-dtags",
        "-shared",
        # "-std=gnu11",
        "-fvisibility=hidden",
        "-Wall",
        "-Wextra",
        "-fno-exceptions",
        "-U_FORTIFY_SOURCE",
        # "-fcf-protection=full",
        "-D_FORTIFY_SOURCE=3",
        # "-ftrivial-auto-var-init=pattern",
        # "-fstack-protector-strong",
        # "-fstack-clash-protection",
        # Below options comes form Google coding style and are needed to allow QT6 source to be
        # built with blaze. These options does not exist on link.txt or flags.make.
        "-Wno-ctad-maybe-unsupported",
        "-Wno-non-virtual-dtor",
        "-Wno-string-conversion",
        "-march=core-avx2",
        "-Ithird_party/glib/glib",
    ],
    includes = [
        QT_BASE + "/build/src/gui/Gui_autogen/",
        QT_BASE + "/build/include/QtGui",
        QT_BASE + "/build/include/QtGui/" + QT_VERSION,
        QT_BASE + "/build/include/QtGui/" + QT_VERSION + "/QtGui",
        QT_BASE + "/build/src/corelib/",
        QT_BASE + "/build/src/gui/",
        QT_BASE + "/src/corelib/kernel/",
        QT_BASE + "/src/gui/",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
        QT_BASE + "/build/include/QtDBus/",
        QT_BASE + "/src/gui/text/",
        QT_BASE + "/src/3rdparty/md4c",
        QT_BASE + "/build/include",
    ],
    linkstatic = True,
    local_defines = [
        "ENABLE_PIXMAN_DRAWHELPERS",
        "Gui_EXPORTS",
        "MD4C_USE_UTF8",
        "QT_ASCII_CAST_WARNINGS",
        "QT_BUILDING_QT",
        "QT_BUILD_GUI_LIB",
        "QT_CORE_LIB",
        "QT_DBUS_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_LEAN_HEADERS=1",
        "QT_MOC_COMPAT",
        "QT_NO_CAST_TO_ASCII",
        # "QT_NO_CONTEXTLESS_CONNECT",
        "QT_NO_DEBUG",
        "QT_NO_EXCEPTIONS",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_NO_USING_NAMESPACE",
        "QT_QPA_DEFAULT_PLATFORM_NAME=\\\"xcb\\\"",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    moc_hdrs = [
        QT_BASE + "/src/gui/kernel/qplatformscreen.h",
        QT_BASE + "/src/gui/kernel/qplatformwindow_p.h",
        QT_BASE + "/src/gui/platform/unix/qunixeventdispatcher_qpa_p.h",
        QT_BASE + "/src/gui/kernel/qeventpoint.h",
        QT_BASE + "/src/gui/accessible/qaccessiblecache_p.h",
        QT_BASE + "/src/gui/kernel/qactiongroup.h",
        QT_BASE + "/src/gui/kernel/qdnd_p.h",
        QT_BASE + "/src/gui/image/qiconengineplugin.h",
        QT_BASE + "/src/gui/text/qsyntaxhighlighter.h",
        QT_BASE + "/src/gui/text/qtextimagehandler_p.h",
        QT_BASE + "/src/gui/itemmodels/qstandarditemmodel.h",
        QT_BASE + "/src/gui/kernel/qplatformintegrationplugin.h",
        QT_BASE + "/src/gui/util/qlayoutpolicy_p.h",
        QT_BASE + "/src/gui/painting/qpainter.h",
        QT_BASE + "/src/gui/text/qabstracttextdocumentlayout.h",
        QT_BASE + "/src/gui/platform/unix/qeventdispatcher_glib_p.h",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenuadaptor_p.h",
        QT_BASE + "/src/gui/platform/unix/qdesktopunixservices.cpp",
        QT_BASE + "/src/gui/kernel/qaction.h",
        QT_BASE + "/src/gui/kernel/qsurface.h",
        QT_BASE + "/src/gui/kernel/qsurfaceformat.h",
        QT_BASE + "/src/gui/painting/qplatformbackingstore.h",
        QT_BASE + "/src/gui/kernel/qplatforminputcontext.h",
        QT_BASE + "/src/gui/kernel/qkeymapper_p.h",
        QT_BASE + "/src/gui/accessible/qaccessible_base.h",
        QT_BASE + "/src/gui/painting/qcolorspace.h",
        QT_BASE + "/src/gui/image/qpixmapcache.cpp",
        QT_BASE + "/src/gui/kernel/qshortcut.h",
        QT_BASE + "/src/gui/text/qtextobject.h",
        QT_BASE + "/src/gui/kernel/qpalette.h",
        QT_BASE + "/src/gui/text/qtexttable.h",
        QT_BASE + "/src/gui/painting/qbrush.h",
        QT_BASE + "/src/gui/image/qimage.h",
        QT_BASE + "/src/gui/kernel/qinputdevice.h",
        QT_BASE + "/src/gui/text/qfontdatabase.h",
        QT_BASE + "/src/gui/text/qfont.h",
        QT_BASE + "/src/gui/kernel/qplatformtheme.h",
        QT_BASE + "/src/gui/itemmodels/qfileinfogatherer_p.h",
        QT_BASE + "/src/gui/accessible/qaccessiblebridge.h",
        QT_BASE + "/src/gui/kernel/qevent.h",
        QT_BASE + "/src/gui/kernel/qplatformsystemtrayicon.h",
        QT_BASE + "/src/gui/kernel/qrasterwindow.h",
        QT_BASE + "/src/gui/platform/unix/dbustray/qxdgnotificationproxy_p.h",
        QT_BASE + "/src/gui/text/qinputcontrol_p.h",
        QT_BASE + "/src/gui/kernel/qplatforminputcontextplugin_p.h",
        QT_BASE + "/src/gui/kernel/qplatformgraphicsbuffer.h",
        QT_BASE + "/src/gui/kernel/qdrag.h",
        QT_BASE + "/src/gui/kernel/qsessionmanager.h",
        QT_BASE + "/src/gui/kernel/qscreen.h",
        QT_BASE + "/src/gui/kernel/qplatformnativeinterface.h",
        QT_BASE + "/src/gui/kernel/qstylehints.h",
        QT_BASE + "/src/gui/kernel/qplatformsharedgraphicscache.h",
        QT_BASE + "/src/gui/text/qtextformat.h",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenuconnection_p.h",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusplatformmenu_p.h",
        QT_BASE + "/src/gui/image/qmovie.h",
        QT_BASE + "/src/gui/platform/unix/dbustray/qdbustrayicon_p.h",
        QT_BASE + "/src/gui/platform/unix/qgenericunixthemes.cpp",
        QT_BASE + "/src/gui/kernel/qplatformdialoghelper.h",
        QT_BASE + "/src/gui/util/qundostack.h",
        QT_BASE + "/src/gui/text/qtextdocument.h",
        QT_BASE + "/src/gui/accessible/qaccessibleplugin.h",
        QT_BASE + "/src/gui/util/qundogroup.h",
        QT_BASE + "/src/gui/kernel/qplatformmenu.h",
        QT_BASE + "/src/gui/text/qtextlist.h",
        QT_BASE + "/src/gui/kernel/qguiapplication.h",
        QT_BASE + "/src/gui/kernel/qopenglcontext.h",
        QT_BASE + "/src/gui/kernel/qhighdpiscaling_p.h",
        QT_BASE + "/src/gui/painting/qpdfwriter.h",
        QT_BASE + "/src/gui/kernel/qgenericplugin.h",
        QT_BASE + "/src/gui/kernel/qshapedpixmapdndwindow_p.h",
        QT_BASE + "/src/gui/kernel/qinputmethod.h",
        QT_BASE + "/src/gui/kernel/qclipboard.h",
        QT_BASE + "/src/gui/itemmodels/qfilesystemmodel.h",
        QT_BASE + "/src/gui/platform/unix/dbustray/qstatusnotifieritemadaptor_p.h",
        QT_BASE + "/src/gui/kernel/qplatformthemeplugin.h",
        QT_BASE + "/src/gui/image/qimageiohandler.h",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenubar_p.h",
        QT_BASE + "/src/gui/kernel/qkeysequence.h",
        QT_BASE + "/src/gui/kernel/qoffscreensurface.h",
        QT_BASE + "/src/gui/kernel/qinputdevicemanager_p.h",
        QT_BASE + "/src/gui/platform/unix/dbusmenu/qdbusmenuregistrarproxy_p.h",
        QT_BASE + "/src/gui/kernel/qinternalmimedata_p.h",
        QT_BASE + "/src/gui/kernel/qpointingdevice.h",
        QT_BASE + "/src/gui/util/qvalidator.h",
        QT_BASE + "/src/gui/text/qtextdocumentlayout_p.h",
        QT_BASE + "/src/gui/kernel/qpaintdevicewindow.h",
        QT_BASE + "/src/gui/kernel/qwindow.h",
        QT_BASE + "/src/gui/kernel/qplatformservices.h",
    ],
    rcc_srcs = [
        QT_BASE + "/build/src/gui/.qt/rcc/qpdf.qrc",
        QT_BASE + "/build/src/gui/.qt/rcc/gui_shaders.qrc",
    ],
    resource_srcs = [
        QT_BASE + "/src/3rdparty/icc/sRGB2014.icc",
        QT_BASE + "/src/gui/painting/shaders/backingstorecompose.vert.qsb",
        QT_BASE + "/src/gui/painting/shaders/backingstorecompose.frag.qsb",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":core",
        ":dbus",
        "@harfbuzz",
        "@glib//glib",
        "@libpng",
        ":emoji_presentation_scanner",
        "//interface_libs/fontconfig",
        "//interface_libs/xkbcommon",
        # ":libxkbcommon_loose_headers",
        # ":libxkbcommon_no_libxcb",
        # "//third_party/GL:OpenGL_headers",
        # "//third_party/GL:loose_headers",
        # "//third_party/Xorg:includes",
    ],
)

qt_internal_library(
    name = "widgets",
    srcs = [
        QT_BASE + "/src/widgets/.moc/moc_qrhiwidget.cpp",
        QT_BASE + "/src/widgets/compat/removed_api.cpp",
        QT_BASE + "/src/widgets/itemviews/qfileiconprovider.cpp",
        QT_BASE + "/src/widgets/kernel/qapplication.cpp",
        QT_BASE + "/src/widgets/kernel/qboxlayout.cpp",
        QT_BASE + "/src/widgets/kernel/qgesture.cpp",
        QT_BASE + "/src/widgets/kernel/qgesturemanager.cpp",
        QT_BASE + "/src/widgets/kernel/qgesturerecognizer.cpp",
        QT_BASE + "/src/widgets/kernel/qgridlayout.cpp",
        QT_BASE + "/src/widgets/kernel/qlayout.cpp",
        QT_BASE + "/src/widgets/kernel/qlayoutengine.cpp",
        QT_BASE + "/src/widgets/kernel/qlayoutitem.cpp",
        QT_BASE + "/src/widgets/kernel/qrhiwidget.cpp",
        QT_BASE + "/src/widgets/kernel/qsizepolicy.cpp",
        QT_BASE + "/src/widgets/kernel/qstackedlayout.cpp",
        QT_BASE + "/src/widgets/kernel/qstandardgestures.cpp",
        QT_BASE + "/src/widgets/kernel/qtestsupport_widgets.cpp",
        QT_BASE + "/src/widgets/kernel/qwidget.cpp",
        QT_BASE + "/src/widgets/kernel/qwidgetrepaintmanager.cpp",
        QT_BASE + "/src/widgets/kernel/qwidgetsvariant.cpp",
        QT_BASE + "/src/widgets/kernel/qwidgetwindow.cpp",
        QT_BASE + "/src/widgets/kernel/qwindowcontainer.cpp",
        QT_BASE + "/src/widgets/styles/qcommonstyle.cpp",
        QT_BASE + "/src/widgets/styles/qdrawutil.cpp",
        QT_BASE + "/src/widgets/styles/qpixmapstyle.cpp",
        QT_BASE + "/src/widgets/styles/qproxystyle.cpp",
        QT_BASE + "/src/widgets/styles/qstyle.cpp",
        QT_BASE + "/src/widgets/styles/qstylefactory.cpp",
        QT_BASE + "/src/widgets/styles/qstylehelper.cpp",
        QT_BASE + "/src/widgets/styles/qstyleoption.cpp",
        QT_BASE + "/src/widgets/styles/qstylepainter.cpp",
        QT_BASE + "/src/widgets/styles/qstyleplugin.cpp",
        QT_BASE + "/src/widgets/styles/qstylesheetstyle.cpp",
        QT_BASE + "/src/widgets/styles/qstylesheetstyle_default.cpp",
        QT_BASE + "/src/widgets/util/qcolormap.cpp",
        QT_BASE + "/src/widgets/util/qsystemtrayicon.cpp",
        QT_BASE + "/src/widgets/widgets/qabstractscrollarea.cpp",
        QT_BASE + "/src/widgets/widgets/qfocusframe.cpp",
        QT_BASE + "/src/widgets/widgets/qframe.cpp",
        QT_BASE + "/src/widgets/widgets/qwidgetanimator.cpp",
        QT_BASE + "/src/widgets/effects/qgraphicseffect.cpp",
        QT_BASE + "/src/widgets/effects/qpixmapfilter.cpp",
        QT_BASE + "/src/widgets/kernel/qaction_widgets.cpp",
        QT_BASE + "/src/widgets/kernel/qwidgetaction.cpp",
        QT_BASE + "/src/widgets/kernel/qformlayout.cpp",
        QT_BASE + "/src/widgets/kernel/qshortcut_widgets.cpp",
        QT_BASE + "/src/widgets/kernel/qtooltip.cpp",
        QT_BASE + "/src/widgets/kernel/qwhatsthis.cpp",
        QT_BASE + "/src/widgets/styles/qstyleanimation.cpp",
        QT_BASE + "/src/widgets/styles/qwindowsstyle.cpp",
        QT_BASE + "/src/widgets/styles/qfusionstyle.cpp",
        QT_BASE + "/src/widgets/widgets/qabstractbutton.cpp",
        QT_BASE + "/src/widgets/widgets/qabstractslider.cpp",
        QT_BASE + "/src/widgets/widgets/qbuttongroup.cpp",
        QT_BASE + "/src/widgets/widgets/qcalendarwidget.cpp",
        QT_BASE + "/src/widgets/widgets/qcheckbox.cpp",
        QT_BASE + "/src/widgets/widgets/qcombobox.cpp",
        QT_BASE + "/src/widgets/widgets/qcommandlinkbutton.cpp",
        QT_BASE + "/src/widgets/widgets/qdatetimeedit.cpp",
        QT_BASE + "/src/widgets/widgets/qdial.cpp",
        QT_BASE + "/src/widgets/widgets/qdockarealayout.cpp",
        QT_BASE + "/src/widgets/widgets/qdockwidget.cpp",
        QT_BASE + "/src/widgets/widgets/qeffects.cpp",
        QT_BASE + "/src/widgets/widgets/qfontcombobox.cpp",
        QT_BASE + "/src/widgets/widgets/qgroupbox.cpp",
        QT_BASE + "/src/widgets/widgets/qkeysequenceedit.cpp",
        QT_BASE + "/src/widgets/widgets/qlabel.cpp",
        QT_BASE + "/src/widgets/widgets/qlcdnumber.cpp",
        QT_BASE + "/src/widgets/widgets/qlineedit.cpp",
        QT_BASE + "/src/widgets/widgets/qlineedit_p.cpp",
        QT_BASE + "/src/widgets/widgets/qwidgetlinecontrol.cpp",
        QT_BASE + "/src/widgets/widgets/qmainwindow.cpp",
        QT_BASE + "/src/widgets/widgets/qmainwindowlayout.cpp",
        QT_BASE + "/src/widgets/widgets/qmdiarea.cpp",
        QT_BASE + "/src/widgets/widgets/qmdisubwindow.cpp",
        QT_BASE + "/src/widgets/widgets/qmenu.cpp",
        QT_BASE + "/src/widgets/widgets/qmenubar.cpp",
        QT_BASE + "/src/widgets/widgets/qprogressbar.cpp",
        QT_BASE + "/src/widgets/widgets/qpushbutton.cpp",
        QT_BASE + "/src/widgets/widgets/qradiobutton.cpp",
        QT_BASE + "/src/widgets/widgets/qwidgetresizehandler.cpp",
        QT_BASE + "/src/widgets/widgets/qdialogbuttonbox.cpp",
        QT_BASE + "/src/widgets/widgets/qrubberband.cpp",
        QT_BASE + "/src/widgets/widgets/qscrollarea.cpp",
        QT_BASE + "/src/widgets/widgets/qscrollbar.cpp",
        QT_BASE + "/src/widgets/widgets/qsizegrip.cpp",
        QT_BASE + "/src/widgets/widgets/qslider.cpp",
        QT_BASE + "/src/widgets/widgets/qabstractspinbox.cpp",
        QT_BASE + "/src/widgets/widgets/qspinbox.cpp",
        QT_BASE + "/src/widgets/widgets/qsplashscreen.cpp",
        QT_BASE + "/src/widgets/widgets/qsplitter.cpp",
        QT_BASE + "/src/widgets/widgets/qstackedwidget.cpp",
        QT_BASE + "/src/widgets/widgets/qstatusbar.cpp",
        QT_BASE + "/src/widgets/widgets/qtabbar.cpp",
        QT_BASE + "/src/widgets/widgets/qplaintextedit.cpp",
        QT_BASE + "/src/widgets/widgets/qtextedit.cpp",
        QT_BASE + "/src/widgets/widgets/qtextbrowser.cpp",
        QT_BASE + "/src/widgets/widgets/qtabwidget.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbar.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbararealayout.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbarlayout.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbarseparator.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbox.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbarextension.cpp",
        QT_BASE + "/src/widgets/widgets/qtoolbutton.cpp",
        QT_BASE + "/src/widgets/widgets/qwidgettextcontrol.cpp",
        QT_BASE + "/src/widgets/dialogs/qcolordialog.cpp",
        QT_BASE + "/src/widgets/dialogs/qdialog.cpp",
        QT_BASE + "/src/widgets/dialogs/qerrormessage.cpp",
        QT_BASE + "/src/widgets/dialogs/qfiledialog.cpp",
        QT_BASE + "/src/widgets/dialogs/qsidebar.cpp",
        QT_BASE + "/src/widgets/dialogs/qfontdialog.cpp",
        QT_BASE + "/src/widgets/dialogs/qinputdialog.cpp",
        QT_BASE + "/src/widgets/dialogs/qmessagebox.cpp",
        QT_BASE + "/src/widgets/dialogs/qprogressdialog.cpp",
        QT_BASE + "/src/widgets/dialogs/qwizard.cpp",
        QT_BASE + "/src/widgets/accessible/complexwidgets.cpp",
        QT_BASE + "/src/widgets/accessible/qaccessiblemenu.cpp",
        QT_BASE + "/src/widgets/accessible/qaccessiblewidget.cpp",
        QT_BASE + "/src/widgets/accessible/qaccessiblewidgetfactory.cpp",
        QT_BASE + "/src/widgets/accessible/qaccessiblewidgets.cpp",
        QT_BASE + "/src/widgets/accessible/rangecontrols.cpp",
        QT_BASE + "/src/widgets/accessible/simplewidgets.cpp",
        QT_BASE + "/src/widgets/accessible/itemviews.cpp",
        QT_BASE + "/src/widgets/itemviews/qabstractitemdelegate.cpp",
        QT_BASE + "/src/widgets/itemviews/qabstractitemview.cpp",
        QT_BASE + "/src/widgets/itemviews/qbsptree.cpp",
        QT_BASE + "/src/widgets/itemviews/qheaderview.cpp",
        QT_BASE + "/src/widgets/itemviews/qitemdelegate.cpp",
        QT_BASE + "/src/widgets/itemviews/qitemeditorfactory.cpp",
        QT_BASE + "/src/widgets/itemviews/qstyleditemdelegate.cpp",
        QT_BASE + "/src/widgets/itemviews/qcolumnview.cpp",
        QT_BASE + "/src/widgets/itemviews/qcolumnviewgrip.cpp",
        QT_BASE + "/src/widgets/itemviews/qdatawidgetmapper.cpp",
        QT_BASE + "/src/widgets/itemviews/qlistview.cpp",
        QT_BASE + "/src/widgets/itemviews/qlistwidget.cpp",
        QT_BASE + "/src/widgets/itemviews/qtableview.cpp",
        QT_BASE + "/src/widgets/itemviews/qtablewidget.cpp",
        QT_BASE + "/src/widgets/itemviews/qtreeview.cpp",
        QT_BASE + "/src/widgets/itemviews/qtreewidget.cpp",
        QT_BASE + "/src/widgets/itemviews/qtreewidgetitemiterator.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsanchorlayout.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsanchorlayout_p.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsgridlayout.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsgridlayoutengine.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsitem.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicslayout.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicslayout_p.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicslayoutitem.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicslayoutstyleinfo.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicslinearlayout.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsproxywidget.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscene.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscene_bsp.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscenebsptreeindex.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicssceneevent.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicssceneindex.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscenelinearindex.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicstransform.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsview.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicswidget.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicswidget_p.cpp",
        QT_BASE + "/src/widgets/graphicsview/qsimplex_p.cpp",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsitemanimation.cpp",
        QT_BASE + "/src/widgets/util/qcompleter.cpp",
        QT_BASE + "/src/widgets/util/qflickgesture.cpp",
        QT_BASE + "/src/widgets/util/qscroller.cpp",
        QT_BASE + "/src/widgets/util/qscrollerproperties.cpp",
        QT_BASE + "/src/widgets/util/qundoview.cpp",
        QT_BASE + "/src/widgets/util/qsystemtrayicon_x11.cpp",
    ],
    hdrs = glob([
        QT_BASE + "/build/include/QtCore/**/*.h",
        QT_BASE + "/build/include/QtWidgets/**/*",
        QT_BASE + "/build/include/QtGui/**/*.h",
        QT_BASE + "/build/src/corelib/**/*.h",
        QT_BASE + "/build/src/gui/**/*.h",
        QT_BASE + "/build/src/widgets/**/*.h",
        QT_BASE + "/mkspecs/linux-g++/**/*.h",
        QT_BASE + "/src/widgets/**/*.h",
    ]),
    additional_linker_inputs = [
        QT_BASE + "/build/src/widgets/Widgets.version",
        QT_BASE + "/src/widgets/QtWidgets.dynlist",
    ],
    copts = [
        "-DNDEBUG",
        "-D_FORTIFY_SOURCE=3",
        "-O2",
        "-U_FORTIFY_SOURCE",
        "-Wall",
        "-Wextra",
        "-Wl,--enable-new-dtags",
        "-Wl,--no-undefined",
        "-Wl,-Bsymbolic-functions",
        "-Wl,-z,relro,-z,now",
        "-Wsuggest-override",
        "-fPIC",
        # "-fcf-protection=full",
        "-fno-exceptions",
        # "-fstack-clash-protection",
        # "-fstack-protector-strong",
        "-fvisibility-inlines-hidden",
        "-fvisibility=hidden",
        "-shared",
        "-std=gnu++20",
        # Below options comes form Google coding style and are needed to allow QT6 source to be
        # built with blaze. These options does not exist on link.txt or flags.make.
        "-Wno-ctad-maybe-unsupported",
        "-Wno-non-virtual-dtor",
        "-Wno-string-conversion",
    ],
    defines = common_defines + ["QT_WIDGETS_LIB"],
    includes = [
        QT_BASE + "/build/include",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtWidgets",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
        QT_BASE + "/build/include/QtWidgets/" + QT_VERSION,
        QT_BASE + "/build/include/QtWidgets/" + QT_VERSION + "/QtWidgets",
        QT_BASE + "/build/include/QtWidgets/" + QT_VERSION + "/QtWidgets/private",
        QT_BASE + "/build/include/QtGui",
        QT_BASE + "/build/include/QtGui/" + QT_VERSION,
        QT_BASE + "/build/include/QtGui/" + QT_VERSION + "/QtGui",
        QT_BASE + "/build/src/corelib",
        QT_BASE + "/build/src/gui",
        QT_BASE + "/build/src/widgets",
        QT_BASE + "/mkspecs/linux-g++",
        QT_BASE + "/src/widgets",
        QT_BASE + "/src/widgets/itemviews",
        QT_BASE + "/src/widgets/kernel",
        QT_BASE + "/src/widgets/accessible",
        QT_BASE + "/src/widgets/dialogs",
        QT_BASE + "/src/widgets/widgets",
    ],
    linkstatic = True,
    local_defines = [
        "QT_ASCII_CAST_WARNINGS",
        "QT_BUILDING_QT",
        "QT_BUILD_WIDGETS_LIB",
        "QT_CORE_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_GUI_LIB",
        "QT_LEAN_HEADERS=1",
        "QT_MOC_COMPAT",
        "QT_NO_CAST_TO_ASCII",
        # "QT_NO_CONTEXTLESS_CONNECT",
        "QT_NO_DEBUG",
        "QT_NO_EXCEPTIONS",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_NO_USING_NAMESPACE",
        "QT_USE_NODISCARD_FILE_OPEN",
        "QT_USE_QSTRINGBUILDER",
        "Widgets_EXPORTS",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    moc_hdrs = [
        QT_BASE + "/src/widgets/widgets/qcheckbox.h",
        QT_BASE + "/src/widgets/itemviews/qtreeview.h",
        QT_BASE + "/src/widgets/widgets/qcombobox_p.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsitemanimation.h",
        QT_BASE + "/src/widgets/widgets/qwidgetanimator_p.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicstransform.h",
        QT_BASE + "/src/widgets/util/qscroller.h",
        QT_BASE + "/src/widgets/kernel/qstackedlayout.h",
        QT_BASE + "/src/widgets/widgets/qgroupbox.h",
        QT_BASE + "/src/widgets/styles/qstyle.h",
        QT_BASE + "/src/widgets/widgets/qlineedit_p.h",
        QT_BASE + "/src/widgets/widgets/qtextbrowser.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscenebsptreeindex_p.h",
        QT_BASE + "/src/widgets/widgets/qtoolbarseparator_p.h",
        QT_BASE + "/src/widgets/itemviews/qabstractitemview.h",
        QT_BASE + "/src/widgets/widgets/qdockwidget_p.h",
        QT_BASE + "/src/widgets/widgets/qmenu.h",
        QT_BASE + "/src/widgets/effects/qpixmapfilter_p.h",
        QT_BASE + "/src/widgets/widgets/qrubberband.h",
        QT_BASE + "/src/widgets/dialogs/qcolordialog.h",
        QT_BASE + "/src/widgets/widgets/qcombobox.h",
        QT_BASE + "/src/widgets/widgets/qabstractbutton.h",
        QT_BASE + "/src/widgets/widgets/qmainwindow.h",
        QT_BASE + "/src/widgets/widgets/qsizegrip.h",
        QT_BASE + "/src/widgets/kernel/qsizepolicy.h",
        QT_BASE + "/src/widgets/widgets/qtabwidget.h",
        QT_BASE + "/src/widgets/kernel/qapplication.h",
        QT_BASE + "/src/widgets/kernel/qgesturemanager_p.h",
        QT_BASE + "/src/widgets/widgets/qframe.h",
        QT_BASE + "/src/widgets/widgets/qplaintextedit_p.h",
        QT_BASE + "/src/widgets/util/qsystemtrayicon_p.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscenelinearindex_p.h",
        QT_BASE + "/src/widgets/dialogs/qfontdialog.h",
        QT_BASE + "/src/widgets/kernel/qboxlayout.h",
        QT_BASE + "/src/widgets/effects/qgraphicseffect_p.h",
        QT_BASE + "/src/widgets/kernel/qwidget.h",
        QT_BASE + "/src/widgets/kernel/qwidgetrepaintmanager_p.h",
        QT_BASE + "/src/widgets/dialogs/qsidebar_p.h",
        QT_BASE + "/src/widgets/styles/qfusionstyle_p.h",
        QT_BASE + "/src/widgets/itemviews/qcolumnviewgrip_p.h",
        QT_BASE + "/src/widgets/widgets/qtabbar.h",
        QT_BASE + "/src/widgets/widgets/qlabel.h",
        QT_BASE + "/src/widgets/widgets/qslider.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicswidget.h",
        QT_BASE + "/src/widgets/kernel/qgridlayout.h",
        QT_BASE + "/src/widgets/widgets/qstatusbar.h",
        QT_BASE + "/src/widgets/widgets/qlcdnumber.h",
        QT_BASE + "/src/widgets/itemviews/qstyleditemdelegate.h",
        QT_BASE + "/src/widgets/itemviews/qcolumnview.h",
        QT_BASE + "/src/widgets/kernel/qwidgetaction.h",
        QT_BASE + "/src/widgets/widgets/qwidgettextcontrol_p.h",
        QT_BASE + "/src/widgets/kernel/qwidgetwindow_p.h",
        QT_BASE + "/src/widgets/itemviews/qitemeditorfactory_p.h",
        QT_BASE + "/src/widgets/widgets/qdialogbuttonbox.h",
        QT_BASE + "/src/widgets/widgets/qabstractspinbox.h",
        QT_BASE + "/src/widgets/dialogs/qmessagebox.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsscene.h",
        QT_BASE + "/src/widgets/widgets/qtextedit.h",
        QT_BASE + "/src/widgets/styles/qstyleplugin.h",
        QT_BASE + "/src/widgets/widgets/qdockwidget.h",
        QT_BASE + "/src/widgets/widgets/qabstractscrollarea_p.h",
        QT_BASE + "/src/widgets/widgets/qmenubar.h",
        QT_BASE + "/src/widgets/itemviews/qheaderview.h",
        QT_BASE + "/src/widgets/itemviews/qlistwidget.h",
        QT_BASE + "/src/widgets/widgets/qscrollbar.h",
        QT_BASE + "/src/widgets/widgets/qcommandlinkbutton.h",
        QT_BASE + "/src/widgets/widgets/qdatetimeedit_p.h",
        QT_BASE + "/src/widgets/dialogs/qerrormessage.h",
        QT_BASE + "/src/widgets/widgets/qabstractslider.h",
        QT_BASE + "/src/widgets/styles/qstyleanimation_p.h",
        QT_BASE + "/src/widgets/util/qscroller_p.h",
        QT_BASE + "/src/widgets/util/qcompleter_p.h",
        QT_BASE + "/src/widgets/widgets/qwidgetresizehandler_p.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsitem.h",
        QT_BASE + "/src/widgets/util/qundoview.h",
        QT_BASE + "/src/widgets/widgets/qmdisubwindow.h",
        QT_BASE + "/src/widgets/util/qsystemtrayicon.h",
        QT_BASE + "/src/widgets/widgets/qtoolbutton.h",
        QT_BASE + "/src/widgets/widgets/qplaintextedit.h",
        QT_BASE + "/src/widgets/kernel/qlayout.h",
        QT_BASE + "/src/widgets/widgets/qsplitter.h",
        QT_BASE + "/src/widgets/itemviews/qtableview.h",
        QT_BASE + "/src/widgets/itemviews/qdatawidgetmapper.h",
        QT_BASE + "/src/widgets/dialogs/qwizard.h",
        QT_BASE + "/src/widgets/styles/qproxystyle.h",
        QT_BASE + "/src/widgets/widgets/qtoolbarextension_p.h",
        QT_BASE + "/src/widgets/itemviews/qlistwidget_p.h",
        QT_BASE + "/src/widgets/styles/qstylesheetstyle_p.h",
        QT_BASE + "/src/widgets/widgets/qtoolbarlayout_p.h",
        QT_BASE + "/src/widgets/dialogs/qinputdialog.h",
        QT_BASE + "/src/widgets/widgets/qdatetimeedit.h",
        QT_BASE + "/src/widgets/kernel/qwidget_p.h",
        QT_BASE + "/src/widgets/itemviews/qtreewidget.h",
        QT_BASE + "/src/widgets/itemviews/qlistview.h",
        QT_BASE + "/src/widgets/widgets/qlineedit.h",
        QT_BASE + "/src/widgets/util/qflickgesture_p.h",
        QT_BASE + "/src/widgets/widgets/qkeysequenceedit.h",
        QT_BASE + "/src/widgets/widgets/qmdiarea.h",
        QT_BASE + "/src/widgets/widgets/qwidgetlinecontrol_p.h",
        QT_BASE + "/src/widgets/widgets/qscrollarea.h",
        QT_BASE + "/src/widgets/styles/qcommonstyle.h",
        QT_BASE + "/src/widgets/itemviews/qtablewidget.h",
        QT_BASE + "/src/widgets/effects/qgraphicseffect.h",
        QT_BASE + "/src/widgets/widgets/qprogressbar.h",
        QT_BASE + "/src/widgets/kernel/qformlayout.h",
        QT_BASE + "/src/widgets/widgets/qmainwindowlayout_p.h",
        QT_BASE + "/src/widgets/dialogs/qprogressdialog.h",
        QT_BASE + "/src/widgets/widgets/qsplashscreen.h",
        QT_BASE + "/src/widgets/widgets/qfocusframe.h",
        QT_BASE + "/src/widgets/widgets/qdial.h",
        QT_BASE + "/src/widgets/widgets/qpushbutton.h",
        QT_BASE + "/src/widgets/kernel/qwindowcontainer_p.h",
        QT_BASE + "/src/widgets/itemviews/qtablewidget_p.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicssceneindex_p.h",
        QT_BASE + "/src/widgets/dialogs/qfiledialog.h",
        QT_BASE + "/src/widgets/widgets/qfontcombobox.h",
        QT_BASE + "/src/widgets/widgets/qbuttongroup.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsanchorlayout.h",
        QT_BASE + "/src/widgets/widgets/qspinbox.h",
        QT_BASE + "/src/widgets/widgets/qtoolbar.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsproxywidget.h",
        QT_BASE + "/src/widgets/widgets/qcalendarwidget.h",
        QT_BASE + "/src/widgets/itemviews/qtreewidget_p.h",
        QT_BASE + "/src/widgets/dialogs/qdialog.h",
        QT_BASE + "/src/widgets/util/qcompleter.h",
        QT_BASE + "/src/widgets/widgets/qstackedwidget.h",
        QT_BASE + "/src/widgets/widgets/qabstractscrollarea.h",
        QT_BASE + "/src/widgets/kernel/qgesture.h",
        QT_BASE + "/src/widgets/widgets/qtoolbox.h",
        QT_BASE + "/src/widgets/graphicsview/qgraphicsview.h",
        QT_BASE + "/src/widgets/styles/qwindowsstyle_p.h",
        QT_BASE + "/src/widgets/itemviews/qabstractitemdelegate.h",
        QT_BASE + "/src/widgets/widgets/qradiobutton.h",
        QT_BASE + "/src/widgets/itemviews/qitemdelegate.h",
        QT_BASE + "/src/widgets/styles/qpixmapstyle_p.h",
        QT_BASE + "/src/widgets/kernel/qrhiwidget.h",
        QT_BASE + "/src/widgets/widgets/qtoolbox.cpp",
        QT_BASE + "/src/widgets/itemviews/qlistwidget.cpp",
        QT_BASE + "/src/widgets/widgets/qtabbar.cpp",
        QT_BASE + "/src/widgets/kernel/qwidgetrepaintmanager.cpp",
        QT_BASE + "/src/widgets/widgets/qmainwindowlayout.cpp",
        QT_BASE + "/src/widgets/dialogs/qinputdialog.cpp",
        QT_BASE + "/src/widgets/widgets/qdockwidget.cpp",
        QT_BASE + "/src/widgets/itemviews/qtableview.cpp",
        QT_BASE + "/src/widgets/widgets/qmdisubwindow.cpp",
        QT_BASE + "/src/widgets/widgets/qmenu.cpp",
        QT_BASE + "/src/widgets/itemviews/qitemeditorfactory.cpp",
        QT_BASE + "/src/widgets/dialogs/qfontdialog.cpp",
        QT_BASE + "/src/widgets/widgets/qeffects.cpp",
        QT_BASE + "/src/widgets/widgets/qcalendarwidget.cpp",
        QT_BASE + "/src/widgets/widgets/qfontcombobox.cpp",
        QT_BASE + "/src/widgets/util/qundoview.cpp",
        QT_BASE + "/src/widgets/dialogs/qmessagebox.cpp",
        QT_BASE + "/src/widgets/dialogs/qcolordialog.cpp",
        QT_BASE + "/src/widgets/kernel/qwhatsthis.cpp",
        QT_BASE + "/src/widgets/kernel/qtooltip.cpp",
        QT_BASE + "/src/widgets/util/qsystemtrayicon_x11.cpp",
    ],
    rcc_srcs = [
        QT_BASE + "/build/src/widgets/.qt/rcc/qstyle.qrc",
        QT_BASE + "/build/src/widgets/.qt/rcc/qstyle1.qrc",
        QT_BASE + "/build/src/widgets/.qt/rcc/qstyle_fusion.qrc",
        QT_BASE + "/build/src/widgets/.qt/rcc/qmessagebox.qrc",
    ],
    resource_srcs = glob([QT_BASE + "/src/widgets/styles/images/*.png"]) + [
        QT_BASE + "/src/widgets/dialogs/images/qtlogo-64.png",
    ],
    uic_srcs = [
        QT_BASE + "/src/widgets/dialogs/qfiledialog.ui",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":core",
        ":gui",
    ],
)

qt_internal_library(
    name = "xcb_qpa",
    srcs = [
        QT_BASE + "/src/plugins/platforms/xcb/.moc/moc_qxcbglintegrationplugin.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/.moc/moc_qxcbwindow.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/qxcbglintegration.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/qxcbglintegrationfactory.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/qxcbnativeinterfacehandler.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbatom.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbbackingstore.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbclipboard.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbconnection.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbconnection_basic.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbconnection_screens.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbconnection_xi2.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbcursor.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbeventdispatcher.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbeventqueue.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbimage.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbintegration.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbkeyboard.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbscrollingdevice.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbmime.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbnativeinterface.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbscreen.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbsystemtraytracker.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbwindow.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbwmsupport.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbxsettings.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbdrag.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qt_xlib_wrapper.c",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbsessionmanager.cpp",
        QT_BASE + "/src/3rdparty/xcb/libxcb/xinput.c",
    ],
    hdrs = glob([
        QT_BASE + "/build/include/*",
        QT_BASE + "/build/include/QtCore/**/*.h",
        QT_BASE + "/build/include/QtGui/**/*.h",
        QT_BASE + "/build/src/corelib/**/*.h",
        QT_BASE + "/build/src/gui/**/*.h",
        QT_BASE + "/build/src/plugins/platforms/xcb/*",
        QT_BASE + "/mkspecs/linux-g++/**/*.h",
        QT_BASE + "/src/3rdparty/xcb/include/**/*.h",
        QT_BASE + "/src/plugins/platforms/xcb/*",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/*",
    ]),
    copts = common_copts + [
        "-DNDEBUG",
        "-D_FORTIFY_SOURCE=3",
        "-O2",
        "-U_FORTIFY_SOURCE",
        "-Wall",
        "-Wextra",
        "-Wl,--enable-new-dtags",
        "-Wl,--no-undefined",
        "-Wl,-Bsymbolic-functions",
        "-Wl,-z,relro,-z,now",
        "-Wno-psabi",
        "-Wsuggest-override",
        "-fPIC",
        # "-fcf-protection=full",
        "-fno-exceptions",
        # "-fstack-clash-protection",
        # "-fstack-protector-strong",
        "-fvisibility-inlines-hidden",
        "-fvisibility=hidden",
        "-fno-exceptions",
        "-ldl",
        "-shared",
        "-std=gnu++20",
        "-std=gnu11",
    ],
    includes = common_includes + [
        QT_BASE + "/build/include",
        QT_BASE + "/build/include",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
        QT_BASE + "/build/include/QtGui",
        QT_BASE + "/build/include/QtGui/" + QT_VERSION,
        QT_BASE + "/build/include/QtGui/" + QT_VERSION + "/QtGui",
        QT_BASE + "/build/src/corelib",
        QT_BASE + "/build/src/gui",
        QT_BASE + "/build/src/plugins/platforms/xcb",
        QT_BASE + "/mkspecs/linux-g++",
        QT_BASE + "/src/3rdparty/xcb/include",
        QT_BASE + "/src/plugins/platforms/xcb",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations",
    ],
    linkstatic = True,
    local_defines = [
        "QT_ASCII_CAST_WARNINGS",
        "QT_BUILDING_QT",
        "QT_BUILD_XCB_PLUGIN",
        "QT_BUILD_XCB_QPA_LIB_LIB",
        "QT_CORE_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_GUI_LIB",
        "QT_LEAN_HEADERS=1",
        "QT_MOC_COMPAT",
        "QT_NO_CAST_TO_ASCII",
        "QT_NO_DEBUG",
        "QT_NO_EXCEPTIONS",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_USE_QSTRINGBUILDER",
        "XcbQpaPrivate_EXPORTS",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    moc_hdrs = [
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/qxcbglintegrationplugin.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbmime.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbconnection_basic.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbconnection.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbscrollingdevice_p.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbeventqueue.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbclipboard.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbnativeinterface.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbeventdispatcher.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbsystemtraytracker.h",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbwindow.h",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/xcb_egl/qxcbeglmain.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/xcb_glx/qxcbglxmain.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbclipboard.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbmain.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbsessionmanager.cpp",
    ],
    resource_srcs = [
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/xcb_egl/xcb_egl.json",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/xcb_glx/xcb_glx.json",
    ],
    deps = [
        ":core",
        ":gui",
        "@glib//glib",
        "//interface_libs/xcb",
        "//interface_libs/X11",
        # ":libxcb-cursor_static",
        # ":libxcb-icccm_static",
        # ":libxcb-image_static",
        # ":libxcb-keysyms_static",
        # ":libxcb-randr_static",
        # ":libxcb-render-util_static",
        # ":libxcb-render_static",
        # ":libxcb-shape_static",
        # ":libxcb-shm_static",
        # ":libxcb-sync_static",
        # ":libxcb-xfixes_static",
        # ":libxcb-xkb_static",
        # ":libxkbcommon_loose_headers",
        # ":libxkbcommon_no_libxcb",
        # "//third_party/GL:GLX_headers",
        # "//third_party/GL:OpenGL_headers",
        # "//third_party/GL:loose_headers",
        # "//third_party/Xorg:libICE_static",
        # "//third_party/Xorg:libSM_static",
        # "//third_party/Xorg:libX11-xcb_static",
        # "//third_party/Xorg:libX11_static",
        # "//third_party/glib/glib",
    ],
)

qt_static_plugin(
    name = "xcb_integration_plugin",
    srcs = [
        QT_BASE + "/build/src/plugins/platforms/xcb/QXcbIntegrationPlugin_autogen/mocs_compilation.cpp",
        QT_BASE + "/src/plugins/platforms/xcb/qxcbmain.cpp",
    ],
    hdrs = glob([
        QT_BASE + "/build/include/*",
        QT_BASE + "/build/include/QtCore/**/*.h",
        QT_BASE + "/build/include/QtGui/**/*.h",
        QT_BASE + "/build/src/corelib/**/*.h",
        QT_BASE + "/build/src/gui/**/*.h",
        QT_BASE + "/build/src/plugins/platforms/xcb/*",
        QT_BASE + "/mkspecs/linux-g++/**/*.h",
        QT_BASE + "/src/3rdparty/xcb/include/**/*.h",
        QT_BASE + "/src/plugins/platforms/xcb/*",
        QT_BASE + "/src/plugins/platforms/xcb/gl_integrations/*",
    ]),
    copts = common_copts + [
        "-DNDEBUG",
        "-D_FORTIFY_SOURCE=3",
        "-O2",
        "-U_FORTIFY_SOURCE",
        "-Wall",
        "-Wextra",
        "-Wl,--enable-new-dtags",
        "-Wl,--no-undefined",
        "-Wl,-z,relro,-z,now",
        "-Wno-psabi",
        "-Wsuggest-override",
        "-fPIC",
        # "-fcf-protection=full",
        "-fno-exceptions",
        # "-fstack-clash-protection",
        # "-fstack-protector-strong",
        "-fvisibility-inlines-hidden",
        "-fvisibility=hidden",
        "-ldl",
        "-shared",
        "-std=gnu++20",
    ],
    includes = common_includes + [
        QT_BASE + "/build/include",
        QT_BASE + "/build/include/QtCore",
        QT_BASE + "/build/include/QtCore/" + QT_VERSION,
        QT_BASE + "/build/include/QtCore/" + QT_VERSION + "/QtCore",
        QT_BASE + "/build/include/QtGui",
        QT_BASE + "/build/include/QtGui/" + QT_VERSION,
        QT_BASE + "/build/include/QtGui/" + QT_VERSION + "/QtGui",
        QT_BASE + "/build/src/corelib",
        QT_BASE + "/build/src/gui",
        QT_BASE + "/build/src/plugins/platforms/xcb",
        QT_BASE + "/build/src/plugins/platforms/xcb/QXcbIntegrationPlugin_autogen/include",
        QT_BASE + "/mkspecs/linux-g++",
        QT_BASE + "/src/plugins/platforms/xcb",
    ],
    local_defines = [
        "QT_CORE_LIB",
        "QT_DEPRECATED_WARNINGS",
        "QT_EXPLICIT_QFILE_CONSTRUCTION_FROM_PATH",
        "QT_GUI_LIB",
        "QT_LEAN_HEADERS=1",
        "QT_NO_DEBUG",
        "QT_NO_EXCEPTIONS",
        "QT_NO_FOREACH",
        "QT_NO_JAVA_STYLE_ITERATORS",
        "QT_NO_NARROWING_CONVERSIONS_IN_CONNECT",
        "QT_NO_QASCONST",
        "QT_NO_QEXCHANGE",
        "QT_NO_QSNPRINTF",
        "QT_PLUGIN",
        "QT_USE_QSTRINGBUILDER",
        "QT_XCB_QPA_LIB_LIB",
        "QXcbIntegrationPlugin_EXPORTS",
        "_GLIBCXX_ASSERTIONS",
        "_LARGEFILE64_SOURCE",
        "_LARGEFILE_SOURCE",
    ],
    plugin_class_name = "QXcbIntegrationPlugin",
    deps = [
        ":core",
        ":gui",
        # ":libxcb-cursor_static",
        # ":libxcb-icccm_static",
        # ":libxcb-image_static",
        # ":libxcb-keysyms_static",
        # ":libxcb-randr_static",
        # ":libxcb-render-util_static",
        # ":libxcb-render_static",
        # ":libxcb-shape_static",
        # ":libxcb-shm_static",
        # ":libxcb-sync_static",
        # ":libxcb-xfixes_static",
        # ":libxcb-xkb_static",
        # ":libxcb_static",
        # ":libxkbcommon_loose_headers",
        # ":libxkbcommon_no_libxcb",
        ":xcb_qpa",
        # "//third_party/GL:GLX_headers",
        # "//third_party/GL:OpenGL_headers",
        # "//third_party/GL:loose_headers",
        # "//third_party/Xorg:libICE_static",
        # "//third_party/Xorg:libSM_static",
        # "//third_party/Xorg:libX11-xcb_static",
        # "//third_party/Xorg:libX11_static",
    ],
)
